<?xml version="1.0"?>
<rss xmlns:iweb="http://www.apple.com/iweb" version="2.0">
  <channel>
    <title>blog</title>
    <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog</link>
    <description></description>
    <item>
      <title>The old web was fun</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/6/19_The_old_Web_was_fun.html</link>
      <guid isPermaLink="false">4627243f-efd4-4e4b-8847-bab4097713c6</guid>
      <pubDate>Fri, 19 Jun 2020 22:05:41 -0400</pubDate>
      <description>I was around during the birth of the web in the early 1990s and have enjoyed every twist and turn since then. Even before creating my own personal website and blog (this site) in 1998, I maintained the Department of Science website at UW (originally &lt;a href="http://sciborg.uwaterloo.ca/"&gt;http://sciborg.uwaterloo.ca&lt;/a&gt;).&lt;br/&gt;&lt;br/&gt;And while I&#x2019;ve enjoyed watching the evolution of the web, I still think the old web was more fun. In this blog post, I&#x2019;ll tell you why. But first, let&#x2019;s cover some background info!&lt;br/&gt;&lt;br/&gt;1. What is the Internet?&lt;br/&gt;&lt;br/&gt;The Internet was born when the ARPANET/NSFnet computer networks were sold off to private companies (later called Internet Service Providers, or ISPs) in the early 1990s. &lt;br/&gt;&lt;br/&gt;However, the Internet was just the physical network that interconnected computers and allowed them to send information back and forth. It was Tim Berners-Lee&#x2019;s Hypertext Transfer Protocol&#xA0;(HTTP) that made the Internet useful to the average person. &lt;br/&gt;&lt;br/&gt;2. What is the Web?&lt;br/&gt;&lt;br/&gt;With HTTP, anyone could serve pages of information to other computers on the Internet, and the worldwide collection of these pages in the 1990s was called the World Wide Web (or web for short). Each page of information was called a webpage and formatted using Hypertext Markup Language (HTML). Computers that shared webpages were called web servers and could host one or more different websites that contained a collection of related webpages. To access a website on a web server across the Internet, you used a web browser application on your computer. &lt;br/&gt;&lt;br/&gt;Early on, I used the Mosaic web browser before Netscape Navigator became popular, but later on most people used Internet Explorer (which was actually an excellent web browser in the 1990s).  Want to find a list of webpages that have information about a specific topic? Well, that&#x2019;s where a search engine website can help you out. Yahoo! was common, but my favorite search engine was AltaVista (below in Netscape Navigator) until a colleague of mine excitedly ushered us to his computer to show us Google, which returned results much faster than other search engines at the time. &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;3. What did old webpages look like?&lt;br/&gt;&lt;br/&gt;Webpages from the 1990s weren&#x2019;t exactly polished by today&#x2019;s standards. For example, this is what Apple&#x2019;s website looked like back in 1997:&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Also remember that you weren&#x2019;t viewing webpages on a fast PC with a 27&#x201D; widescreen LCD monitor back then. Instead, you were probably using a chunky 15&#x201D; cathode ray tube monitor (shown right) on an early Pentium with 32MB of RAM. Worse yet, you probably had incredibly slow (e.g. dial-up) Internet access to your ISP. &lt;br/&gt;&lt;br/&gt;Thus, smaller webpages took a few seconds to load, while flashier websites with multiple graphics took significantly longer.&lt;br/&gt;&lt;br/&gt;But on the flip side, the process of getting information on your computer from somewhere else in the world was an extreme novelty at the time, and worth the wait. The whole rise of the web in the 1990s happened during a time of intense technological advancement and optimism. Computers were suddenly everywhere and considered the future. Even The Rolling Stones performed their song Start Me Up for the launch of Windows 95. &lt;br/&gt;&lt;br/&gt;Ultimately, this meant that navigating a website back in 1997 was far more exhilarating and rewarding than navigating a website today.&lt;br/&gt;&lt;br/&gt;4. What did my website look like back then?&lt;br/&gt;&lt;br/&gt;If you&#x2019;re curious as to what my personal website and blog looked like back in 1998-2004, you can check it out here: &lt;a href="https://triosdevelopers.com/jason.eckert/old/"&gt;https://triosdevelopers.com/jason.eckert/old/&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;I originally made it in the vi editor on an UltraSPARC-based Sun Ultra 10 computer running Solaris UNIX, but later continued editing it on a PowerPC-based Macintosh computer running Mac OS X UNIX (hence the two animated GIFs on the main page).&lt;br/&gt;&lt;br/&gt;5. So, why was the old Web more fun?&lt;br/&gt;&lt;br/&gt;You probably noticed from my old website that I did it to have fun. And it was fun. After all, anyone could make a webpage back in the 1990s using a text editor because HTML was incredibly easy to learn without a textbook. If you saw a webpage that you liked when browsing the web, all you needed to do was view the associated HTML source code in your web browser (e.g. View menu  &gt; Source). You could easily identify what the code did and then copy the parts you needed to your own HTML file. To host the webpage, you could upload to your ISP, which often gave you free web space on their web servers for personal websites. Of course, tech-savvy people often ran their own web server on Linux or BSD UNIX using the Apache web server program.&lt;br/&gt;&lt;br/&gt;Now, of course, you could argue that places like Wix.com make it easy to create and host websites today. And that is true - however, you have to use the features and templates that they provide only. In other words, you don&#x2019;t have 100% creative control. Moreover, it&#x2019;s not cheap, and additional features cost additional money.&lt;br/&gt;&lt;br/&gt;Full creative control led to some pretty awesome content back in the 1990s. Many webpages were only text. But they were just as good (or better) than flashy ones because the person making the webpage focused on the content, and you focused on reading it. &lt;br/&gt;To illustrate this, check out: &lt;a href="http://motherfuckingwebsite.com/"&gt;http://motherfuckingwebsite.com/&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;Other webpages and blogs were colorful and gaudy, but held a creative aesthetic that you don&#x2019;t see too much today outside the indie artist scene. After all, someone poured their time and soul into it. You could look at a 1990s webpage and easily understand more about the person who made it. &lt;br/&gt;&lt;br/&gt;But what made the old web the most fun was that people didn&#x2019;t take it too seriously. People shared information, wrote blogs, made fansites, and loved doing it. Even official websites from companies liked to have fun with the webpages they created. The end goal at the time was to share information in this new information age, as opposed to the aggressive monetization that drives the web today.&lt;br/&gt;&lt;br/&gt;Want to surf the old web and see for yourself? Navigate to &lt;a href="http://oldweb.today/"&gt;http://oldweb.today/&lt;/a&gt;</description>
      <iweb:image href="Media/object002.jpg"></iweb:image>
      <iweb:comment enabled="0" count="0" link="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/6/19_The_old_Web_was_fun.html#comment_layer"></iweb:comment>
    </item>
    <item>
      <title>Customizing macOS for development&#13;</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/5/18_Setting_up_macOS_for_development.html</link>
      <guid isPermaLink="false">22b72aa3-e0bd-4ef5-bcf9-79c7831862be</guid>
      <pubDate>Mon, 18 May 2020 19:59:43 -0400</pubDate>
      <description>So your boss gave you a Mac for development. Or maybe you bought a Mac because you have to develop iOS apps. Or maybe you bought a MacBook because you need to develop software as well as look good at Starbucks (after the pandemic is over, of course).&lt;br/&gt;&lt;br/&gt;Unfortunately doing serious development using macOS is cumbersome at best. The Aqua desktop in macOS has few features or components geared towards developers. If you look over the shoulder of most Mac users, you&#x2019;ll notice that their desktop looks like a very messy desk. The more you use macOS, the more you realize this messy desktop practice is caused by the design of Aqua and not the user. After all, Apple designed every aspect of Aqua to fit the needs of the most novice users, and not power users such as developers. Luckily, there are several things you can do to tweak your Mac into a fast developer workstation that boasts an interface with the productivity features you&#x2019;re used to on Windows 10 and Linux desktops. In this blog post, I&#x2019;ll share my general recommendations for turning macOS into a developer workstation.&lt;br/&gt;&lt;br/&gt;This blog post assumes you know the basic structure of the macOS operating system. If you don&#x2019;t, or you&#x2019;re somewhat new to macOS but have some Linux knowledge, read &lt;a href="Entries/2018/2/17_macOS_for_Linux_Admins.html"&gt;my &#x201C;macOS for Linux Admins&#x201D; blog post&lt;/a&gt; first!  &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;1. Install macOS a second time&lt;br/&gt;&lt;br/&gt;This is something I highly recommend on any developer workstation, for reasons I&#x2019;ll get to shortly. You can easily (and safely) install macOS multiple times on the same system because Apple now uses the APFS filesystem, which supports logical volumes on the same underlying partition. &lt;br/&gt;&lt;br/&gt;Modern Macs come with a small ARM processor called the T2 chip that acts as the SSD controller, sound controller, touchbar controller, Trusted Platform Module (TPM), and pretty much anything else Apple wants to cram in there to save cost and maximize profit. When you get a new Mac, the filesystem on the SSD is encrypted by default, and this encryption is performed entirely by the T2 chip. While this is generally a good thing for personal files, it causes havoc if you perform many small writes to the filesystem because the T2 chip just can&#x2019;t handle the load like other storage controllers can (it was designed for the storage needs of Facebook users at Starbucks, not the demands of a developer workstation). Thus, if you are testing a containerized app using a Docker/LinuxKit setup, K8s, or a Linux/Windows virtual machine (which incur a large storage performance cost on macOS for some reason), it&#x2019;s best to create another &#x201C;development&#x201D; installation of macOS alongside your default &#x201C;personal&#x201D; installation of macOS that is not encrypted to ensure that the T2 chip can give you fast storage performance. Each time you boot your Mac, you can hold down the Option key on your keyboard to get a menu that allows you to choose which macOS installation you want to boot (development or personal).&lt;br/&gt;&lt;br/&gt;Another reason to install macOS a second time is that your personal and development installations can have different Apple IDs attached to them. This allows you to easily separate your personal Apple ID from another Apple ID that is used solely for developing software, or as part of an Apple Developer Program for your organization.&lt;br/&gt;&lt;br/&gt;To install macOS a second time, you must first create a new APFS logical volume: &lt;br/&gt;	1.	Open Disk Utility (/Applications/Utilities/Disk Utility).&lt;br/&gt;	2.	Click the drop-down menu beside the View button in the toolbar and choose Show All Devices.&lt;br/&gt;	3.	Click the + button to create a new APFS volume. &lt;br/&gt;	4.	Specify a name for your APFS volume (e.g. development) and optionally set a Reserve (minimum) or Quota (maximum) size if you want to guarantee or limit the space the new logical volume can consume from the underlying partition, respectively.&lt;br/&gt;&lt;br/&gt;Next, you can open the App Store, search for macOS Catalina and choose to download it (approx. 8GB). When the download has finished, the installation will start automatically. At the beginning of the installation, you&#x2019;ll be prompted for the volume to install macOS to. Simply choose the new volume you created (e.g. development) and proceed through the rest of the installation normally. The new volume will not be encrypted, and the system will automatically boot into macOS installed on your new volume (unless you hold down the Option key on your Mac keyboard at boot time and select your personal macOS installation).&lt;br/&gt;&lt;br/&gt;Once you&#x2019;re booted into your new macOS installation, you can set up your environment, as described in the following sections.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;2. Install a package manager &lt;br/&gt;&lt;br/&gt;In order to make macOS a useful developer workstation, you need to add a LOT of open source software to it. Homebrew (or just brew) is a proper package manger for macOS that allows you to obtain open source software from GitHub and compile it (if necessary) to run on macOS with simple commands. For example, brew install neofetch will install neofetch, while brew install nvim will install neovim. You can also use brew to remove software or restart services that were installed via brew. Most open source software that you&#x2019;re ever going to need can be installed using brew if there isn&#x2019;t a pre-compiled binary app available from some website. To install brew, go to &lt;a href="https://brew.sh/"&gt;https://brew.sh/&lt;/a&gt; and copy the command shown into a terminal window. This will first download the Xcode command line tools (approx. 2.5GB) before installing the brew system files.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;3. Install a better terminal, code editor and font set&lt;br/&gt;&lt;br/&gt;The three I&#x2019;ve chosen below are the ones I use the most, but you may prefer different packages, or additional ones depending on your development needs. For example, you may need to install additional developer frameworks and IDEs for your development (my recommendations here don&#x2019;t assume what sort of development you&#x2019;ll be doing).&lt;br/&gt;&lt;br/&gt;iTerm is a feature-rich and fully customizable terminal emulator that replaces the limited one that comes with macOS (/Applications/Utilities/Terminal.app). You can download the iTerm app from &lt;a href="https://www.iterm2.com/"&gt;https://www.iterm2.com&lt;/a&gt;. Next, you should move the downloaded iTerm2 app to your /Applications folder and create a link to it on your Dock for easy access.&lt;br/&gt;&lt;br/&gt;Visual Studio Code is arguably the best text and code editor for many different types of development. In addition to being fully customizable, Visual Studio Code has some pretty slick Intellisense. You can download the Visual Studio Code app from &lt;a href="https://code.visualstudio.com/"&gt;https://code.visualstudio.com&lt;/a&gt;. Next, you should move the downloaded app to your /Applications folder and create a link to it on your Dock for easy access. &lt;br/&gt;&lt;br/&gt;Nerd Fonts provides a font set that is better suited towards developers compared to the default font set provided by macOS. You can use Nerd Fonts in any app that allows you to customize the font set, as well as within macOS itself. You can install Nerd Fonts using the following brew commands:&lt;br/&gt;   brew tap homebrew/cask-fonts&lt;br/&gt;   brew cask install font-hack-nerd-font&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;4. Install an automatic tiling window manager&lt;br/&gt;&lt;br/&gt;To avoid the mess that is Aqua, you&#x2019;ll need a proper window manager. You&#x2019;ll want to install yabai (&lt;a href="https://github.com/koekeishiya/yabai"&gt;https://github.com/koekeishiya/yabai&lt;/a&gt;), which manages the windows that you have on your desktop automatically so that everything is organized perfectly.&lt;br/&gt;&lt;br/&gt;Unfortunately, you have to disable two features of macOS System Integrity Protection (SIP) to allow yabai to work. If you research them, you&#x2019;ll find that they are quite minor, and you&#x2019;re only disabling them on your second (development) macOS installation only, so it won&#x2019;t affect your personal installation of macOS. Once these two features are disabled, you&#x2019;ll also notice a dramatic speed improvement when using macOS (for this reason alone, many macOS power users choose disable it).&lt;br/&gt;&lt;br/&gt;To disable these two features of SIP, power down your computer and then boot it while holding down the Command (&#x2318;) + R&#xA0;key combination to enter recovery mode. Log into your second installation of macOS when prompted and select Terminal from the&#xA0;Utilities menu. Next, type the following command (ignore any warnings) and reboot normally afterwards:&lt;br/&gt;   csrutil enable --without debug --without fs &lt;br/&gt;&lt;br/&gt;Following this, you can install yabai using brew, and then start and allow yabai to run on your system. The detailed steps to perform these tasks are listed on the yabai website: &lt;a href="https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release"&gt;https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release&lt;/a&gt;). &lt;br/&gt;&lt;br/&gt;You&#x2019;ll also need to create a ~/.yabairc file that contains your desired yabai configuration. The example yabairc file listed on the yabai website would likely suit your needs, and the options within are rather self-explanatory. That being said, here is &lt;a href="Entries/2020/5/18_Setting_up_macOS_for_development_files/yabairc.txt"&gt;my ~/.yabairc configuration&lt;/a&gt; in case you want to paste it into your ~/.yabairc file. &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;5. Install a hotkey daemon&lt;br/&gt;&lt;br/&gt;As a programmer, there is nothing more important than a great set of customized keyboard shortcuts for everything you need to do. That&#x2019;s where a hotkey daemon, such as skhd (&lt;a href="https://github.com/koekeishiya/skhd"&gt;https://github.com/koekeishiya/skhd&lt;/a&gt;) comes in. You can install and start the skhd hotkey daemon using brew:&lt;br/&gt;   brew install koekeishiya/formulae/skhd&lt;br/&gt;   brew services start skhd&lt;br/&gt;&lt;br/&gt;You&#x2019;ll also need to create a ~/.skhdrc file with your desired configuration. The example .skhdrc file listed on the skhd website has plenty of great examples, but here is &lt;a href="Entries/2020/5/18_Setting_up_macOS_for_development_files/skhdrc.txt"&gt;my ~/.skhdrc configuration&lt;/a&gt; in case you want to paste it into your ~/.skhdrc file. &lt;br/&gt;&lt;br/&gt;In my ~/.skhdrc file, the first three lines set keyboard shortcuts for my iTerm, Visual Studio Code and Firefox apps (the open command searches /Applications for the name specified):&lt;br/&gt;   cmd - return : open -a iTerm&lt;br/&gt;   cmd + shift - return : open -a &amp;quot;Visual Studio Code&amp;quot;&lt;br/&gt;   alt - return : open -a Firefox&lt;br/&gt;&lt;br/&gt;The remaining (many) lines of my ~/.skhdrc file create shortcuts that use yabai to modify window behavior. For example, these four lines shift window focus:&lt;br/&gt;   alt - left : yabai -m window --focus west&lt;br/&gt;   alt - down : yabai -m window --focus south&lt;br/&gt;   alt - up : yabai -m window --focus north&lt;br/&gt;   alt - right : yabai -m window --focus east&lt;br/&gt;&lt;br/&gt;You&#x2019;ll want to spend time to look over and modify these ~/.skhdrc lines to suit your needs!&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;6. Clean up Aqua and install a widget system&lt;br/&gt;&lt;br/&gt;It&#x2019;s also important to remove any visual distractions from your macOS desktop. To do this, open the System Preferences app and perform the following steps:&lt;br/&gt;	1.	Navigate to General and select the option to auto-hide the menu bar. &lt;br/&gt;	2.	Navigate to Dock and, select the option to move your Dock position to the right of the screen (since we tile windows from left to right, this will maximize the vertical space used by them). Also select the option to auto-hide the Dock so that it stays out of view unless you need it.&lt;br/&gt;&lt;br/&gt;Of course, there are always some things you&#x2019;ll want to display on your desktop in the absence of a menu bar or Dock. For these, you can install a widget system, such as &#xDC;bersicht. You can download the &#xDC;bersicht app from &lt;a href="http://tracesof.net/uebersicht"&gt;http://tracesof.net/uebersicht&lt;/a&gt;.  Next, you should move the downloaded app to your /Applications folder, and create a link to it on your Dock for easy access. &lt;br/&gt;&lt;br/&gt;The &#xDC;bersicht website also has widgets for you to download and drag to your widgets folder (you can see this folder by selecting Open Widgets Folder from the &#xDC;bersicht menu in the top menu bar). To customize the widgets, edit the .jsx file (they are written in JavaScript + React's JSX) and possibly the related .json file, depending on the widget. &lt;br/&gt;&lt;br/&gt;The three widgets I have on my desktop (shown below) display the top Hacker News posts in the upper left, system statistics and time information in the lower left, and a random XKCD comic in the lower right (for sanity purposes):&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;If you want to use the Mount Fuji wallpaper shown above, you can download it from &lt;a href="https://github.com/Who23/dots/blob/master/walls/wallpaper.jpg"&gt;https://github.com/Who23/dots/blob/master/walls/wallpaper.jpg&lt;/a&gt;. &lt;br/&gt;&lt;br/&gt;When you open applications (using skhd shortcuts), their layout will be adjusted automatically by yabai as shown below:&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;In the above desktop, you&#x2019;ll notice that I also use tmux in my iTerm2 alongside a starship prompt to maximize my terminal width. Both of these can easily be installed using brew:&lt;br/&gt;   brew install tmux&lt;br/&gt;   brew install starship &lt;br/&gt;          (you must also add eval &amp;quot;$(starship init zsh)&amp;quot; to your ~/.zshrc)&lt;br/&gt;&lt;br/&gt;That&#x2019;s pretty much the basic configuration I&#x2019;d recommend doing for any developer using macOS. I hope you find it helpful!</description>
      <iweb:image href="Media/object002_1.jpg"></iweb:image>
      <iweb:comment enabled="0" count="0" link="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/5/18_Setting_up_macOS_for_development.html#comment_layer"></iweb:comment>
    </item>
    <item>
      <title>FreeBSD UNIX for Linux sysadmins</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/5/2_FreeBSD_UNIX_for_Linux_sysadmins.html</link>
      <guid isPermaLink="false">db87e5b8-0632-46d0-a53d-1366a06c8fd3</guid>
      <pubDate>Sat, 2 May 2020 07:51:51 -0400</pubDate>
      <description>If you&#x2019;ve ever installed and explored another Linux distro (what Linux sysadmin hasn&#x2019;t?!?), then exploring FreeBSD is going be somewhat similar with a few key differences. &lt;br/&gt;&lt;br/&gt;While there is no graphical installation, the installation process is straightforward and similar to installing a server-based Linux distro. Just make sure you choose the local_unbound package when prompted if you want to cache DNS lookups locally, as FreeBSD doesn&#x2019;t have a built-in local DNS resolver that does this.&lt;br/&gt;&lt;br/&gt;Following installation, the directory structure is almost identical to Linux. Of course, you&#x2019;ll notice some small differences here and there (e.g. regular user home directories are located under /usr/home instead of /home). Standard UNIX commands such as ls, chmod, find, which, ps, nice, ifconfig, netstat, sockstat (the ss command in Linux) are exactly as you&#x2019;d expect, but with some different options here and there that you&#x2019;ll see in the man pages. And yes, reboot and poweroff are there too.&lt;br/&gt;&lt;br/&gt;Why FreeBSD?&lt;br/&gt;&lt;br/&gt;The main benefit FreeBSD has over Linux is speed. You thought Linux was fast? Try FreeBSD. It has the fastest IP stack of any operating system by a long shot. Since it&#x2019;s UNIX and you can provide the same services (e.g. Samba, Apache, NFS, Nginx), this means you can provide them faster and leaner.  &lt;br/&gt;&lt;br/&gt;FreeBSD has also kept to its KISS (Keep It Simple Stupid) UNIX roots without compromising features, while Linux configuration gets more and more complex as time goes on. Want to start a service at boot time? You just add a line that says servicename=&#x201D;YES&#x201D; to a small text file (described later). And this small text file stores 90% of your system configuration, including your IP settings. In short, configuring a FreeBSD system is both fun and addictive.&lt;br/&gt;&lt;br/&gt;While configuring FreeBSD is easy, it&#x2019;s also incredibly powerful. There are granular security features and system configuration/recovery features in FreeBSD that you won&#x2019;t find in other operating systems. For those who want to go down that rabbit hole, it&#x2019;s well worth your time! And, of course, native support for ZFS (the most advanced filesystem on the planet) is a big plus. &lt;br/&gt;&lt;br/&gt;In the following sections, I&#x2019;ll describe some key differences and features of FreeBSD that you&#x2019;ll want to know coming from a Linux sysadmin background. Of course, I&#x2019;m assuming that you already know the associated topics in Linux before reading these sections! Key filenames and components are in red, while commands and configuration parameters are in code font.&lt;br/&gt;&lt;br/&gt;1. System configuration&lt;br/&gt;&lt;br/&gt;/etc/rc.conf contains nearly all system configuration, including IP configuration, hostname, default GW, services (daemons) that should start at boot time, and so on. Lines within this file have parameter=value syntax and are easy to edit using a text editor, such as vi. You can also  use the sysrc -a command to show all of the configured values in /etc/rc.conf, or the sysrc parameter=value to modify or add configuration.&lt;br/&gt;&lt;br/&gt;FreeBSD stores the default parameters for configuration files in a defaults subdirectory. For example, /etc/defaults/rc.conf stores a large number of system-configured defaults that are overridden by /etc/rc.conf. Never change the entries in /etc/defaults/rc.conf - instead, just override them by adding the same lines to /etc/rc.conf with the values you want. There&#x2019;s also a /etc/rc.conf.d/ directory that software packages can add files to that set system parameters (it&#x2019;s empty on a default installation of FreeBSD).&lt;br/&gt;&lt;br/&gt;2. Boot loader and kernel configuration&lt;br/&gt;&lt;br/&gt;Boot loader configuration is stored in /boot/loader.conf (and /boot/defaults/loader.conf), and uses the same syntax as /etc/rc.conf.&lt;br/&gt;&lt;br/&gt;To view modules inserted into the kernel, you can use kldstat. You can also load and unload modules manually. For example:&lt;br/&gt;  kldload linprocfs.ko      (loads the Linux procfs filesystem module) &lt;br/&gt;  kldunload linprocfs.ko      (unloads the same module)&lt;br/&gt;&lt;br/&gt;To make sure this module gets loaded automatically each time you boot, you could add the following line to the /boot/loader.conf file: &lt;br/&gt;  [cmd=]kldload /boot/kernel/linprocfs.ko[/cmd]&lt;br/&gt;&lt;br/&gt;The FreeBSD kernel also has many properties and parameters that you can view and configure. You can use the kenv command to view the currently-configured parameters on your system, or the sysctl -o -a command to view all available parameters and their default values.  The sysctl command can also be used to view specific parameters. For example:&lt;br/&gt;  sysctl kern      (shows all parameters starting with kern)&lt;br/&gt;  sysctl kern.securelevel      (shows current value of the kernel security level)&lt;br/&gt;  sysctl hw.model      (shows your CPU model)&lt;br/&gt;&lt;br/&gt;To set a kernel parameter at boot time, add the appropriate line to the /etc/sysctl.conf file. &lt;br/&gt;&lt;br/&gt;3. System initialization&lt;br/&gt;&lt;br/&gt;Just like the GRUB2 boot loader on Linux, FreeBSD has an interactive boot loader called boot0 that is much more user friendly. It displays a menu for 10 seconds by default that allows you to enter rescue mode or modify kernel values manually, among other things. If you are repairing a system, a copy of useful binary programs is stored under the /rescue/ directory and made available to boot0.&lt;br/&gt;&lt;br/&gt;Once the kernel is loaded by boot0, the init daemon parses the large /etc/rc script to start the other daemons that you specified within /etc/rc.conf by executing the appropriate daemon scripts under the /etc/rc.d/ directory. There also are other scripts executed by init at boot time. For example, /etc/netstart configures the network according to the parameters you specified in /etc/rc.conf.&lt;br/&gt;&lt;br/&gt;After your system has booted, you can view the /var/run/dmesg.boot file to see the hardware detected and modules loaded by your kernel, or view the /var/log/messages file to view the daemons and components that were started by init (including any errors).&lt;br/&gt;&lt;br/&gt;4. Storage configuration&lt;br/&gt;&lt;br/&gt;FreeBSD uses different device files for storage as well as different methods for partitioning and creating filesystems. To see a list of the physical storage devices you have, you can use the following two commands:&lt;br/&gt;  camcontrol devlist&lt;br/&gt;  geom disk list&lt;br/&gt;&lt;br/&gt;Some sample device files for these storage devices include:&lt;br/&gt;  /dev/cd0      (first CD/DVD)&lt;br/&gt;  /dev/da0      (first SCSI/SAS disk or USB drive, which emulates SCSI)&lt;br/&gt;  /dev/ada0      (first IDE/SATA disk)&lt;br/&gt;  /dev/nvme0      (first NVMe SSD)&lt;br/&gt;  /dev/nvme0ns1      (first namespace on the first NVMe SSD)&lt;br/&gt;&lt;br/&gt;Say, for example, you have one SATA SSD in your system that has a GPT partition table. FreeBSD will likely create three partitions on it during the installation:&lt;br/&gt;  /dev/ada0p1      (usually a 512KB FreeBSD boot partition or UEFI boot partition)&lt;br/&gt;  /dev/ada0p2      (usually a swap partition)&lt;br/&gt;  /dev/ada0p3      (rest of disk - usually given to ZFS, or mounted to / if you use UFS)&lt;br/&gt;&lt;br/&gt;If you have older storage devices that use an MBR partition table, each primary partition is called a slice in FreeBSD, and further subdivided into up to 7 device nodes using a special BSD disk label. For example, the first slice on /dev/ada0 could be subdivided into 4 device nodes, with each one assigned a letter: &lt;br/&gt;  /dev/ada0s1a      (first device node in the first slice on ada0)&lt;br/&gt;  /dev/ada0s1b      (second device node in the first slice on ada0)&lt;br/&gt;  /dev/ada0s1c      (third device node in the first slice on ada0)&lt;br/&gt;  /dev/ada0s1d      (fourth device node in the first slice on ada0)&lt;br/&gt;&lt;br/&gt;You can view your disk configuration using the gpart command (which can also create/manage partitions too): &lt;br/&gt;  gpart show -p ada0      (shows partitions on ada0)&lt;br/&gt;  gpart show -l ada0      (shows labels on ada0, which match files under /dev/gpt/)&lt;br/&gt;&lt;br/&gt;If you just want to se the partition labels for disks on the system, you could instead run the glabel list command.&lt;br/&gt;&lt;br/&gt;5. Filesystem configuration&lt;br/&gt;&lt;br/&gt;The only two filesystems that are commonly used on FreeBSD for storage are UFS (which is ancient and should only be used if you have serious mental health issues), and ZFS (which is amazing, and commonly configured on production Linux servers).&lt;br/&gt;&lt;br/&gt;After creating partitions on a GPT disk (or slices and device nodes on an MBR disk), you can use the following commands create and work with UFS filesystems: &lt;br/&gt;  newfs      (creates a UFS filesystem)&lt;br/&gt;  growfs      (extends the size of a UFS filesystem)&lt;br/&gt;  tunefs      (tunes UFS filesystem parameters)&lt;br/&gt;  mksnap_ffs      (creates a UFS filesystem snapshot)&lt;br/&gt;  fsck      (checks a UFS filesystem for errors)&lt;br/&gt;&lt;br/&gt;Normally, you&#x2019;d use ZFS instead of UFS on a FreeBSD system as it has superior enterprise features, including corruption protection and device fault tolerance. The same zpool and zfs commands you used on Linux to configure ZFS can also be used on FreeBSD. For example, to create a RAID-Z1 dataset called lala from the space on 3 different SCSI disks and put a ZFS filesystem on it, you could use the following command: &lt;br/&gt;  zpool create lala raidz /dev/da1p1 /dev/da2p1 /dev/da3p1       &lt;br/&gt;&lt;br/&gt;Some other sample zpool and zfs commands include:&lt;br/&gt;  zpool status lala      (view status of the lala dataset)&lt;br/&gt;  zpool list      (lists all ZFS datasets)&lt;br/&gt;  zpool get free      (displays free space information from all ZFS datasets)&lt;br/&gt;&lt;br/&gt;  zfs create lala/stuff      (creates another ZFS dataset under the lala dataset)&lt;br/&gt;  zfs list      (displays all ZFS datasets and where they are mounted)&lt;br/&gt;  zfs get compression      (displays compression setting for all ZFS datasets)&lt;br/&gt;  zfs set compression=lz4 lala/stuff     (enables compression for lala/stuff)&lt;br/&gt;&lt;br/&gt;When you run the zfs list command on a newly-installed system, you&#x2019;ll see that there is one ZFS dataset called zroot that is created by the FreeBSD installer. This dataset contains many other datasets underneath it for different system directories:&lt;br/&gt;  zroot/ROOT/default is mounted to /&lt;br/&gt;  zroot/usr is mounted to /usr&lt;br/&gt;  zroot/usr/home is mounted to /usr/home&lt;br/&gt;  zroot/var is mounted to /var&lt;br/&gt;and so on. &lt;br/&gt;&lt;br/&gt;What you may find odd is that zroot/ROOT/default is mounted to the root of the system. This is because FreeBSD supports different boot environments if you take ZFS snapshots of the / filesystem. Before performing a risky configuration, you could take a snapshot of your system called zroot/ROOT/May2 and then revert to it if your risky configuration fails! You can even choose your a previous boot environment at the FreeBSD boot loader menu when you boot the system. Here are some useful boot environment commands:&lt;br/&gt;  pkg install beadm      (installs the boot environment package - pkg is discussed later)&lt;br/&gt;  beadm create May2      (create snapshot of system called May2)&lt;br/&gt;  zfs list      (you should see zroot/ROOT/default and zroot/ROOT/May2)&lt;br/&gt;  beadm activate May2 &amp;amp;&amp;amp; reboot      (reverts system to May2 snapshot) &lt;br/&gt;&lt;br/&gt;There is also a /etc/fstab file that mounts non-ZFS filesystems at boot just as you&#x2019;d expect on a Linux system. If you use ZFS exclusively, /etc/fstab just activates the swap partition only. And just as Linux has udev rules for restricting access to storage devices, you can add lines to /etc/devfs.conf or /etc/devfs.rules to do this on FreeBSD.&lt;br/&gt;&lt;br/&gt;The only other glaring difference between Linux and FreeBSD when it comes to the filesystem is the use of filesystem attributes. On Linux systems, you could set filesystem attributes using the chattr command, and list them with the lsattr command. However, FreeBSD uses a different set of attributes called filesystem flags that can be set at the system or user level:&lt;br/&gt;  chflags sunlink file      (sets the system unlink flag on a file, to prevent file deletion)&lt;br/&gt;  chkflags nosunlink file      (unsets the system unlink flag on a file)&lt;br/&gt;  ls -lo file      (displays flags on a file)&lt;br/&gt;&lt;br/&gt;6. Users and groups&lt;br/&gt;&lt;br/&gt;As on Linux systems, FreeBSD stores user configuration in /etc/passwd (readable by everyone), but converts it to a /etc/pwd.db database for fast system access. However, instead of using the /etc/shadow file like Linux does, FreeBSD stores all user and password configuration in /etc/master.passwd (readable by root only) and converts it to /etc/spwd.db for fast system access. Groups are stored in /etc/group as you&#x2019;d expect, but there is there is no sudo functionality - instead, you must be part of the wheel (big wheel) group to use the su command to run commands as root or obtain a root shell. &lt;br/&gt;&lt;br/&gt;Default home directory files for new users are copied from /usr/share/skel/. You can also create rules to allow or prevent user access in the /etc/login.access file, as well as define user classes for accessing system resources in the /etc/login.conf file. &lt;br/&gt;&lt;br/&gt;Common commands to create and manage users include:&lt;br/&gt;  adduser      (creates a user - defaults values are taken from /etc/adduser.conf)&lt;br/&gt;  adduser -C      (creates the /etc/adduser.conf file with values you specify)&lt;br/&gt;  rmuser      (removes a user)&lt;br/&gt;  pw useradd/userdel/usermod/lock/unlock      (creates &amp;amp; manages users)&lt;br/&gt;  chpass      (modifies settings for a user using the vi editor)&lt;br/&gt;  vipw      (edits /etc/master.passwd using vi, and then rebuilds /etc/spwd.db)&lt;br/&gt;&lt;br/&gt;7. Packages, services and monitoring&lt;br/&gt;&lt;br/&gt;Installing and managing packages on FreeBSD is just as easy as using the Red Hat or Debian package managers on a Linux system. Instead of dnf or apt, you use the pkg command: &lt;br/&gt;  pkg update      (updates package list from online repository)&lt;br/&gt;  pkg search bash      (searches online repository for bash packages)&lt;br/&gt;  pkg install bash      (installs bash package from online repository)&lt;br/&gt;  pkg upgrade bash      (upgrades bash to latest version)&lt;br/&gt;  pkg info bash      (displays package details)&lt;br/&gt;  pkg info -l bash      (displays package file contents)&lt;br/&gt;  pkg check bash      (checks bash package content for missing/corrupted files)&lt;br/&gt;  pkg lock bash      (prevents modification or removal of package)&lt;br/&gt;  pkg remove bash      (removes bash package)&lt;br/&gt;  pkg clean      (cleans up files in the package repository, /var/cache/pkg/)&lt;br/&gt;  pkg autoremove      (auto removes unneeded dependency packages)&lt;br/&gt;  pkg which /usr/local/bin/bash      (displays package the bash file belongs to)&lt;br/&gt;  freebsd-update fetch      (downloads latest version of FreeBSD) &lt;br/&gt;  freebsd-update install      (installs latest version of FreeBSD - reboot after)&lt;br/&gt;&lt;br/&gt;After installing a daemon package, you must also configure it to start at boot time by adding a line to the /etc/rc.conf file. For example, after installing the apache24 package (for the Apache Web server daemon), you could start it at boot time by adding the following line to /etc/rc.conf:&lt;br/&gt;  apache24_enable=&#x201D;YES&#x201D;      (yes, it&#x2019;s that easy)&lt;br/&gt;&lt;br/&gt;The configuration files for any daemons that you install are under /etc or /usr/local/etc. For example, you&#x2019;ll find the httpd.conf configuration file for Apache in the /usr/local/etc/apache24/ directory on FreeBSD.&lt;br/&gt;&lt;br/&gt;You can also manage daemons using the same service command used in Linux systems prior to Systemd:&lt;br/&gt;  service -e      (displays daemons that are enabled and order they are started at boot)&lt;br/&gt;  service sshd stop/start/restart      (stops/starts/restarts the sshd daemon)&lt;br/&gt;  service sshd onestart      (starts the sshd daemon if it is not listed in /etc/rc.conf)&lt;br/&gt;  service sshd extracommands      (displays additional options for working with sshd)&lt;br/&gt;&lt;br/&gt;Of course, loading additional daemons will impact the performance of your system, especially as the number of clients connecting to them increases. You can monitor the performance of your FreeBSD system using the same vmstat and top commands you&#x2019;re used to in Linux (the FreeBSD top command also lists ZFS performance statistics), as well as monitor disk performance using the gstat command.&lt;br/&gt;&lt;br/&gt;Similarly, you can use a plethora of different network commands in FreeBSD to monitor network statistics. Here are some of my favourites:&lt;br/&gt;  netstat -w 1 -d      (displays packet stats every 1 second)&lt;br/&gt;  netstat -na -f inet      (displays active IPv4 connections)&lt;br/&gt;  netstat -na -f inet6      (displays active IPv6 connections)&lt;br/&gt;  netstat -m      (displays tunable memory buffer information for IP stack)&lt;br/&gt;  sockstat -4      (displays IPv4 sockets)&lt;br/&gt;  sockstat -6      (displays IPv6 sockets)&lt;br/&gt;&lt;br/&gt;8. Other stuff&lt;br/&gt;&lt;br/&gt;The previous 7 sections outlined the main areas of FreeBSD that most Linux admins will want to know. In this final section, I&#x2019;ll list some extra stuff (in no particular order).&lt;br/&gt;&lt;br/&gt;Compiling software from source is very easy in FreeBSD. You can run the portsnap auto command to download the source code for the ready-to-compile ports tree from the FreeBSD repository to the /usr/ports/ directory and then use the appropriate make commands to compile and install it on your system.&lt;br/&gt;&lt;br/&gt;If you want to configure a firewall, there are three firewall systems to choose from (if you view the FreeBSD handbook), but the most common one is PF from OpenBSD. You place your rules in /etc/pf.conf and use the pfctl command to control the firewall. You can also use blacklistd to block undesired connections (or too many connections). You can use blacklistctl to control blacklistd, as well as list connection rules in /etc/blacklistd.conf.&lt;br/&gt;&lt;br/&gt;FreeBSD jails are one of the earliest examples of OS virtualization/containerization. To create a FreeBSD jail, you download a userland (filesystem) tarball from the FreeBSD repository and extract it to a directory of your choice (e.g. /jails/container1). Next, you add a paragraph to the /etc/jail.conf file that configures the jail parameters (e.g. IP address, etc.). Finally, you can start and manage your jail using a wide variety of different commands, including:&lt;br/&gt;  service jail start container1      (starts the container1 jail)&lt;br/&gt;  service jail stop container1      (stops the container1 jail)&lt;br/&gt;  jls      (views all jails running on the system)&lt;br/&gt;  jexec container1 command      (executes a command in the container1 jail)&lt;br/&gt;  pkg -j container1 install apache24      (installs Apache in the container1 jail)&lt;br/&gt;&lt;br/&gt;If you start the NFSv4 file sharing daemons (installed by default) by adding the appropriate entries to /etc/rc.conf, you can add lines to /etc/exports to share out directories on your system. However, you can instead use ZFS to share datasets using NFSv4. These datasets are listed in /etc/zfs/exports. For example, to share out the /usr/home directory using NFS, you could use the following command:&lt;br/&gt;  zfs set sharenfs=on zroot/usr/home      &lt;br/&gt;&lt;br/&gt;If you&#x2019;ve been a Linux or UNIX administrator for a long time, you&#x2019;ll likely run into things on FreeBSD that remind you of days gone by. For example, you can still start daemons on demand using inetd and entries within /etc/inetd.conf, or use the old LPD printing system by adding printer entries to /etc/printcap (please install and use CUPS instead....seriously). FreeBSD also uses the old syslogd to log system events using the entries in /etc/syslog.conf (it works well so why change it, right?). However, instead of logrotate, FreeBSD uses newsyslog to rotate log files according to rules in /etc/newsyslog.conf.&lt;br/&gt;&lt;br/&gt;And yes, if you want to use FreeBSD as a workstation, you can install X.org and GNOME. But given that Linux is leading the charge in that area, it&#x2019;d be wiser to use Linux as your workstation, and leverage FreeBSD as a wicked fast server.</description>
      <iweb:image href="Media/object003.jpg"></iweb:image>
      <iweb:comment enabled="0" count="0" link="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/5/2_FreeBSD_UNIX_for_Linux_sysadmins.html#comment_layer"></iweb:comment>
    </item>
    <item>
      <title>Microsoft turns 45</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/4/4_Entry_1.html</link>
      <guid isPermaLink="false">1b3efb80-9312-451d-b639-7ce94d92c5a3</guid>
      <pubDate>Sat, 4 Apr 2020 07:40:52 -0400</pubDate>
      <description>On April 4th 1975, a small company called Microsoft was founded in Albuquerque, New Mexico. They would later become the most pivotal company in the technology world, and their co-founder Bill Gates would become the world&#x2019;s most prolific philanthropist.&lt;br/&gt;&lt;br/&gt;Like many tech companies, Microsoft has had a colourful past. Started by two whiz kids (&lt;a href="https://en.wikipedia.org/wiki/Paul_Allen"&gt;Paul Allen&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Bill_Gates"&gt;Bill Gates&lt;/a&gt;), they started by selling operating system and supporting software. &lt;br/&gt;&lt;br/&gt;Xenix UNIX (later sold to SCO) was their first operating system product in 1980, followed closely by MS-DOS in 1981 (which they originally purchased from Tim Paterson). &lt;br/&gt;&lt;br/&gt;After Bill Gates made a deal with IBM to license MS-DOS for their PC line of computers, but retain rights to the software, Microsoft turned into the world&#x2019;s largest software company, making tons of $$.&lt;br/&gt;&lt;br/&gt;But Microsoft wasn&#x2019;t just MS-DOS. The Multi-Tool Word software they created for Xenix later became Microsoft Word - one of the keystones for the Microsoft Office suite that would become the staple of productivity worldwide, overshadowing all competitors. Today, Microsoft 365 (formerly Office 365) is moving much of that productivity to the cloud, where it can benefit from integration with other products (email, SharePoint file hosting, Microsoft Teams conferencing/messaging, and so on).&lt;br/&gt;&lt;br/&gt;While Microsoft Windows and the Microsoft Mouse were both released in 1983, they weren&#x2019;t nearly as common or well-known as MS-DOS. &lt;br/&gt;&lt;br/&gt;However, by the early 1990s, Windows 3.1 was everywhere, and when Windows 95 was released, it became the ultimate symbol of tech coolness. Microsoft followed it up closely with Windows NT 4, which provided a server operating system for companies that evolved into Windows Server.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Microsoft was late to the Internet and TCP/IP bandwagon (Bill Gates was skeptical about its significance early on). However, when they got on board, Internet Explorer was released. And while Internet Explorer sucks today, it was by far the best Web browser of the late 1990s and early 2000s. &lt;br/&gt;&lt;br/&gt;Microsoft&#x2019;s focus in the 1990s was on software developers.  By the late 1990s, everyone was developing on the Windows platform, and Microsoft was very very good to their developer community - including game developers. Since the DirectX API was often used by game developers when making PC games, Microsoft decided to enter the game console by putting DirectX in a box (calling it the Xbox) and took a massive chunk of the game console industry away from some pretty big players (Sony, Sega, Nintendo).&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;By the early 2000s, Microsoft was a massive organization, and had a lot of bad press. They were constantly under scrutiny for aggressively crushing their competitors. They had security issues with their Windows 9x/2000/XP operating systems (viruses/malware galore). And they were widely hated by the open source (i.e. Linux) community. In 2001, Steve Ballmer (then CEO of Microsoft) called Linux &#x201C;a cancer that attaches itself in an intellectual property sense to everything it touches.&#x201D; They were widely seen as a big evil company in the early 2000s.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Then, around 2010, they reinvented themselves and changed all of that. &lt;br/&gt;&lt;br/&gt;Their focus changed to providing cloud services (Azure), and their new operating system (Windows 10) cleaned up their security act in an impressive way. Defender in Windows 10 sends suspicious stuff on your PC to Azure for deep inspection. If it&#x2019;s deemed malicious, a new malware signature is created and sent out to the plethora of Windows 10 PCs on the Internet. Now, 95% of all new malware is first detected and remedied by Microsoft instead of other security companies.&lt;br/&gt;&lt;br/&gt;At that same time, Microsoft changed their people and culture. The cut-throat business folks and product evangelists were replaced by progressive, open source-loving thinkers and a new CEO who embodied all of it: Satya Nadella. They&#x2019;ve fought hard to earn the trust of the open source community this past decade, and they&#x2019;ve definitely got it and continue to build on it.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Their failed (but noble) attempt to get into the smartphone race alongside iOS and Android with Windows Phone was ditched and replaced by one of the most useful mobile productivity lines: the Microsoft Surface. Microsoft is thinking so intently about what people actually need to be productive, that even Apple (who has since lost their touch when it comes to innovation) is trying to copy the Microsoft Surface with their latest iPad Pro line.&lt;br/&gt;&lt;br/&gt;I can&#x2019;t wait to see what they do next.   </description>
      <iweb:image href="Media/object001.jpg"></iweb:image>
      <iweb:comment enabled="0" count="0" link="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/4/4_Entry_1.html#comment_layer"></iweb:comment>
    </item>
    <item>
      <title>Getting the most out of your online course</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/3/20_Getting_the_most_out_of_your_online_course.html</link>
      <guid isPermaLink="false">f94e65b6-f79a-46ee-a686-aaed606104ff</guid>
      <pubDate>Fri, 20 Mar 2020 20:52:16 -0400</pubDate>
      <description>The COVID-19 virus has forced colleges and universities in Ontario to quickly move their stuff to an online format to allow classes to continue using social isolation. &lt;br/&gt;&lt;br/&gt;As a learner, this means that you&#x2019;ll be immersed in a new learning format that is very different from a physical classroom environment. Both physical and online learning have their own unique advantages, and you&#x2019;ll likely be engaging in both over the course of your career. As a result, it&#x2019;s good to familiarize yourself with online learning sooner than later!&lt;br/&gt;&lt;br/&gt;So, how does online learning work?&lt;br/&gt;Online courses are almost always taught with video conferencing software. This could be Zoom, ON24, Microsoft Teams, Cisco WebEx, or one or several others. This software is essentially your home during an online course.&lt;br/&gt;&lt;br/&gt;Your college will invite you to join a group for your class in this software, and your instructor will start each class with a video/audio conference call.  You&#x2019;ll be able to hear your instructor speak as they narrate slide decks, or demonstrate program configuration and configuration tasks on their system by sharing their screen to the class. In many ways, the screen sharing functionality of video conferencing software is similar to what your instructor normally does using a classroom projector. &lt;br/&gt;&lt;br/&gt;There&#x2019;s also a text chat feature that allows you to communicate with your instructor and fellow classmates, as well an area for you to obtain files that your instructor shares with you. Usually, your instructor will mute everyone else&#x2019;s microphone while they talk, but can un-mute it during verbal discussions or when you have a question.&lt;br/&gt;&lt;br/&gt;If your computer has a webcam, video conferencing software will allow you to chat visually with your instructor or class in order to ask questions or engage in discussion. However, most instructors disable this functionality at the beginning of each class to ensure that you focus on the material presented.&lt;br/&gt;&lt;br/&gt;Most online classes are shorter than physical classes (typically a maximum of 2 hours) to ensure that everyone stays alert. The remaining time is used for discussion or getting individual help performing lab exercises and completing homework tasks that your instructor assigns. At the end of the online class, your instructor will likely share a video of the class that you can watch again.&lt;br/&gt;&lt;br/&gt;Tests and quizzes may be performed in your video conferencing software, or you may be instructed to connect to your college&#x2019;s learning management system (LMS) to take the test or quiz. &lt;br/&gt;&lt;br/&gt;What should I do to prepare for an online course?&lt;br/&gt;At minimum, you&#x2019;ll need access to a modern computer with a microphone (optional but recommended if you want to ask questions verbally instead of using the text chat feature). Most video conferencing software allows you to connect using a tablet or phone, but for the best experience you should plan to use a computer. If you are in a technology-focused course, your computer should also have enough hardware (memory, CPU, storage) to handle any additional software your need to run in the course.&lt;br/&gt;&lt;br/&gt;You&#x2019;ll also need a reliable Internet connection. A basic Internet plan is fine as long as it&#x2019;s high speed. &lt;br/&gt;&lt;br/&gt;Next, you&#x2019;ll need to familiarize yourself with the video conferencing software that is used. This may be done interactively with your instructor on the first day of online class, or may be done beforehand using videos or online tutorials that your college has prepared. Don&#x2019;t try to learn every feature of this software. Just focus on the core functionality (the rest can come over time, and only if you find it useful).&lt;br/&gt;&lt;br/&gt;Finally, watch your email for important online training details from your instructor!&lt;br/&gt;&lt;br/&gt;What should I do before starting each online class:&lt;br/&gt;There are several tasks that you must do prior to attending an online class in order to get the most out of the experience:&lt;br/&gt;	&#x2022;	Unplug any virtual assistants (e.g. Google Home, Amazon Alexa) and make sure your family members aren&#x2019;t playing online games or watching online videos (e.g. YouTube/Netflix) to guarantee Internet bandwidth for your session.&lt;br/&gt;	&#x2022;	Test your audio. You may need to enable these in your conferencing software and operating system, or adjust their levels. If you have a microphone, turn down the volume on your speakers to a lower level to prevent an audio feedback loop that lowers audio quality. &lt;br/&gt;	&#x2022;	Get a notepad ready. Note taking is still valuable during online education as it allows you to summarize key details that you find valuable, as well as write down questions that you&#x2019;d like to ask your instructor later using your microphone or text chat feature.&lt;br/&gt;	&#x2022;	Take a bathroom break. Just like you do before going on a long car ride.&lt;br/&gt;	&#x2022;	Connect to your session 5 minutes early. This allows you to resolve any last-minute connection and audio issues, as well as ensures that you don&#x2019;t miss any important information at the beginning of the class. Don&#x2019;t be John:&lt;br/&gt;                  Me: Glad you could join us John.&lt;br/&gt;                  John: Sorry for being late - the traffic was horrendous.&lt;br/&gt;                  Me: John, this is an online class&#x2026;.&lt;br/&gt;                  John: Yes, network traffic.&lt;br/&gt;&lt;br/&gt;Other key things to remember when attending an online class:&lt;br/&gt;	&#x2022;	Note and adhere to your instructor&#x2019;s rules of engagement. Your instructor will let you know how and when you can interact during an online course to ensure that everyone has a good online experience. For example, in larger classes your instructor may request that you do not enable your microphone or webcam, and wait until specific times in order to ask questions.&lt;br/&gt;	&#x2022;	Use online course etiquette. The same rules that apply in a physical classroom environment also apply online. Don&#x2019;t make comments in the text chat that would be considered inappropriate during a physical class.&lt;br/&gt;	&#x2022;	Dress for a physical class. If your computer has a webcam, you may accidentally start sharing your video if you click the wrong button in your video conferencing software, and your whole class could see you on their screens.&lt;br/&gt;	&#x2022;	Don&#x2019;t be afraid to participate. You&#x2019;ll get more out of an online class the more you participate with your instructor and classmates. And participating online is much easier than participating in a physical classroom environment. &lt;br/&gt;	&#x2022;	If you are unable to attend for technical reasons, email your instructor. If you don&#x2019;t email your instructor, they won&#x2019;t know that you were attempting to connect and are experiencing issues. They may be able to resolve it quickly or forward it to college tech support to resolve the issue.&lt;br/&gt;	&#x2022;	If you are unable to attend for other reasons, email your instructor. Just as you would in a physical class, you should always let your instructor know when you need to miss a class. They can then send you information and a link to the video of the session to allow you to catch up. &lt;br/&gt;	&#x2022;	After the class, review the session video and any notes. This will allow you to consolidate key concepts as well as prepare questions that you can ask during the next session.&lt;br/&gt;	&#x2022;	Stay caffeinated.</description>
      <iweb:image href="Media/object002_2.jpg"></iweb:image>
      <iweb:comment enabled="0" count="0" link="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/3/20_Getting_the_most_out_of_your_online_course.html#comment_layer"></iweb:comment>
    </item>
    <item>
      <title>Tips to survive teaching an online course</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/3/16_Online_teaching_advice_from_a_veteran.html</link>
      <guid isPermaLink="false">fe066a8a-74da-4e4b-aa5d-f4ded3bf0233</guid>
      <pubDate>Mon, 16 Mar 2020 15:10:42 -0400</pubDate>
      <description>The COVID-19 virus has forced colleges and universities in Canada to quickly move their stuff to an online format to allow classes to continue using social isolation. One teacher even wrote a funny song about it: &lt;a href="https://www.youtube.com/watch?v=CCe5PaeAeew"&gt;https://www.youtube.com/watch?v=CCe5PaeAeew&lt;/a&gt; &lt;br/&gt;&lt;br/&gt;I&#x2019;m luckier than most, since I&#x2019;ve been doing online seminars and classes for a wide variety of different organizations for many years now. Most of these sessions have been Train the Trainer (TTT) classes where I teach a course to other technical instructors worldwide. Apparently I&#x2019;ve gotten so good at it that I was voted best TTT instructor in 2019 by members of the Computing Technology Industry Association (CompTIA), and won their annual award at their summit in Vegas!&lt;br/&gt;&lt;br/&gt;And while many &#x201C;How to teach online&#x201D; posts and videos have appeared this past week, none of them I&#x2019;ve seen mention what you &#x201C;actually&#x201D; need to pull it off, so I thought I&#x2019;d offer my take on it here.&lt;br/&gt;&lt;br/&gt;While the physical classroom environment can&#x2019;t be replicated online, there are ways to make an online learning experience great - and it&#x2019;s merely a combination of what you already know with some online-only tips and tricks.&lt;br/&gt;&lt;br/&gt;1. First, you need some tools:&lt;br/&gt;	&#x2022;	A modern computer with a webcam and microphone. Most laptops come with these already, but desktops often do not.&lt;br/&gt;	&#x2022;	A reliable Internet connection. A basic Internet plan is fine as long as it&#x2019;s high speed. &lt;br/&gt;	&#x2022;	Video conferencing software. This could be Zoom, ON24, Microsoft Teams, Cisco WebEx, or one or several others. The one you use should have these core features:&lt;br/&gt;	&#x2022;	The ability to do in-person video/audio and screen sharing&lt;br/&gt;	&#x2022;	A chat window&lt;br/&gt;	&#x2022;	The ability to share files&lt;br/&gt;	&#x2022;	The ability to record a session for later viewing&lt;br/&gt;&lt;br/&gt;The video conferencing software is your home online. For your class to participate with you online, you must invite each attendee to your group in the video conferencing software (your organization may instead do this). Next, you start a video/audio conference call at the beginning of each class where students can see you and hear you speak. In this conference call, you can display and narrate a slide deck (e.g. PowerPoint) to students, as well as use or demonstrate programs on your PC that you wish to screen share. You can also screen share your entire Desktop to get the same experience as using a classroom projector (just move any personal files from your Desktop to another location first).&lt;br/&gt;&lt;br/&gt;2. Preparing for an online class:&lt;br/&gt;	&#x2022;	Explore the video conferencing software as much as possible. Don&#x2019;t try to learn every feature of this software. Just focus on the core functionality (the rest can come over time, and only if you find it useful). Your organization may train you how to use this software, or provide videos that walk you through the configuration.&lt;br/&gt;	&#x2022;	Design your class around a slide deck (e.g. PowerPoint). This provides a central structure for your class that you can return to. The slide deck should also start with an agenda. &lt;br/&gt;	&#x2022;	Plan to provide continuous visual and audio stimulation at all times. Instead of narrating a particular slide for a long period of time, break the slide up into several smaller slides that you can advance periodically as you talk.&lt;br/&gt;	&#x2022;	Plan to switch your delivery methods frequently (e.g. every 5 slides). You could switch to a screen share to demonstrate software configuration or open a Web page, or you could introduce a discussion topic or question that students can respond to in the chat window. For example, after discussing the cp command in a Linux course, I may ask students to answer this question in the chat window (give them 30 seconds to respond before taking up the answer):&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;               &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;	&#x2022;	Do what is comfortable for you. When creating custom content for a slide deck, you could create a diagram in a program such as Microsoft Paint if you are quick doing so, or you could just write it on paper, take a picture of it with your phone and add it:&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;	&#x2022;	Plan to assign homework tasks or lab exercises each class. Online training should always extend beyond the online presentation component. These tasks and exercises can be reviewed and discussed at the beginning of the next class using the chat window.&lt;br/&gt;	&#x2022;	Plan for an online session that takes no more than 2 hours. We can only stay focused in an online session for up to 2 hours, which is why it is widely considered the maximum time for online training sessions. If your organization teaches a class for more than 2 hours, you could use the remaining time to help students with their homework tasks or lab exercises using the chat or individual video calling features of your conferencing software.&lt;br/&gt;	&#x2022;	Plan to provide your students with as much direction as possible. Any detailed information that is easily lost during a demonstration or when a slide advances should be provided to students. This can include hyperlinks, supporting files, commands, and so on. If you share your PowerPoint presentation with your students or record each session, you can put this information in the slide deck itself. Alternatively, you could put this information in a file that you upload to your video conferencing software or send to students in a follow-up email.&lt;br/&gt;&lt;br/&gt;3. Before starting an online class:&lt;br/&gt;	&#x2022;	Make sure you eliminate possible audio distractions on your end. This means putting kids and pets somewhere you can&#x2019;t hear them, as well as turning the ringer off on all phones (mobile and landline). Since my dog likes to bark at things she sees outside of my big living room window, I put up a doggy gate at the living room entrance before online training to ensure she can&#x2019;t get to that window.&lt;br/&gt;	&#x2022;	Unplug any virtual assistants (e.g. Google Home, Amazon Alexa) and make sure your family members aren&#x2019;t playing online games or watching online videos (e.g. YouTube/Netflix) to guarantee Internet bandwidth for your session.&lt;br/&gt;	&#x2022;	Test your audio and video. You may need to enable these in your conferencing software and operating system, or adjust their levels. If there is audio static, turn down the volume on your speakers to prevent the audio feedback loop. If video is not working, check to ensure that the shutter on your webcam isn&#x2019;t closed. &lt;br/&gt;	&#x2022;	Fill a sealable bottle with water and keep it at your feet. Online training involves more talking than classroom training, so you&#x2019;ll need it if your mouth gets dry.&lt;br/&gt;	&#x2022;	Take a bathroom break. Just like you do before going on a long car ride.&lt;br/&gt;&lt;br/&gt;4. When teaching an online class:&lt;br/&gt;	&#x2022;	Mute all students at the beginning of the session. The amount of background audio feedback from students will prevent you from hearing anything. Most conferencing software has a &#x201C;mute all&#x201D; function, but you may have to mute each student connection individually in the software, or ask participants to mute their own microphones.&lt;br/&gt;	&#x2022;	Keep it simple and informal. Students feel more comfortable (and hence learn more) in  a casual session.&lt;br/&gt;	&#x2022;	Focus on the material and the students. While most of what you do will be presenting or demonstrating material, try to interact with your students as much as possible. This means providing regular questions or discussion topics. Periodically pause during your session and ask &#x201C;Does anyone have any questions about ______?&#x201D; and give people time to respond.&lt;br/&gt;	&#x2022;	Talk slower and watch your chat window continuously for student questions. You could respond to them right away, or periodically (e.g. after you finish a topic or sentence) depending on your teaching style.&lt;br/&gt;	&#x2022;	Do NOT aim for perfection. This isn&#x2019;t Broadway, and you&#x2019;ll gradually get better and better after doing many more online sessions.&lt;br/&gt;	&#x2022;	Expect things to go wrong. When they do, give your class a 5 minute discussion break so that you can try to resolve them. Also keep your tech support phone/email handy!&lt;br/&gt;&lt;br/&gt;Hope this helps!&lt;br/&gt;Cheers,&lt;br/&gt;Jason.</description>
      <iweb:image href="Media/object002_3.jpg"></iweb:image>
      <iweb:comment enabled="0" count="0" link="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/3/16_Online_teaching_advice_from_a_veteran.html#comment_layer"></iweb:comment>
    </item>
    <item>
      <title>How to write an academic technical textbook</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/2/19_How_to_write_an_academic_technical_textbook.html</link>
      <guid isPermaLink="false">ce87c815-c6e2-4570-b12b-6670fdfb5e77</guid>
      <pubDate>Wed, 19 Feb 2020 20:05:26 -0500</pubDate>
      <description>&lt;br/&gt;If you head over to my &lt;a href="../about_me.html"&gt;about me&lt;/a&gt; page, you&#x2019;ll see that I&#x2019;ve written a large number of textbooks over the years for different publishers, as well as worked as a technical editor for many other titles. &lt;br/&gt;&lt;br/&gt;Just this past week, I mentioned to a coworker that I&#x2019;ve finished submitting the AU1 of the final chapter for my latest textbook (Hands-On Windows Server 2019, ISBN: 978-0-357-43615-8). &lt;br/&gt;&lt;br/&gt;Their response was &#x201C;That&#x2019;s great, but what is an AU1?&#x201D; I&#x2019;ve written so many textbooks that I take terms like AU1 for granted. In this blog post I&#x2019;ll share the process used to write an academic technical textbook, and give some tips along the way!&lt;br/&gt;&lt;br/&gt;The people:&lt;br/&gt;There are several people involved in the development of an academic textbook, regardless of the publisher. And while different publishers vary in the number and type of these roles, most academic authoring projects involve:&lt;br/&gt;	&#x2022;	The author (or authors if multiple people are creating content).&lt;br/&gt;	&#x2022;	A technical editor (TE). The TE reviews everything that the author creates, verifying technical details to ensure that the content is accurate. This involves verifying technical details online, testing URLs, and ensuring that the content is technically sound. &lt;br/&gt;	&#x2022;	One or more reviewers. Reviewers are often college instructors who teach a course that aligns well with the textbook content. Their main job is to read over the material and identify whether there are areas that they think will be difficult for their students to understand, as well as give their general impressions about content and flow. You can think of reviewers as the private beta testers for a textbook project.&lt;br/&gt;	&#x2022;	A copyeditor (CE). The CE is a content editor that checks for grammatical errors and modifies content according to a style guide (a large set of rules for wording consistency and flow created by the publisher). They also review every sentence to ensure readability and comprehension. If there is a sentence that they do not understand, they will ask for clarity. They also check structural elements for consistency. If a sentence refers to a particular figure, key term or concept, they will check the reference to ensure that it is accurate. Copyeditors transform the content into a beautiful and consistent state.&lt;br/&gt;	&#x2022;	A project manager (PM). The PM sets and modifies the schedule during the project. PMs typically manage several different authoring projects at the same time.&lt;br/&gt;	&#x2022;	A developmental editor (DE). The DE is the central point of contact for all other people in the project (PM, CE, reviewers, TE and author). They distribute files as necessary and provide the communication that keeps everyone updated and on track. They also edit content for structure, flow and consistency before distributing it to others. DEs are often experienced or senior editors that have the background needed to oversee an authoring project. You can think of DEs as the movie directors for a textbook project.  &lt;br/&gt;&lt;br/&gt;The process:&lt;br/&gt;The steps involved in authoring a textbook are listed below. Each step is given a deadline for completion by the PM in the project schedule:&lt;br/&gt;	1.	Chapters are submitted by the author to the DE. This submission is called an Author 1st (AU1) and is often a Microsoft Word document and supporting figure files. &lt;br/&gt;	2.	The DE sends the AU1 to the TE and reviewers. &lt;br/&gt;	3.	After reading through the chapter, the TE and reviewers add their comments to the chapter (using the Comments feature of Microsoft Word) and send it back to the DE.&lt;br/&gt;	4.	The DE combines all TE and reviewer comments into a single chapter document and edits it for flow and consistency before sending it back to the author.&lt;br/&gt;	5.	The author responds to all TE and reviewer comments, making associated changes (if necessary) before sending it back to the DE as an Author 2nd (AU2).&lt;br/&gt;	6.	The DE sends the AU2 to the CE, who performs an in-depth edit of the content (using the Track Changes feature of Microsoft Word). The CE also adds comments for sentences that need clarification (using the Comments feature of Microsoft Word) before sending the chapter back to the DE.&lt;br/&gt;	7.	The DE sends the copyedited chapter to the author, who accepts/rejects the changes (with rationale) and responds to all comments before returning it back to the DE. &lt;br/&gt;	8.	The DE releases the chapter to the production department, who composites the chapter content (including figures) to produce a finished PDF. This PDF (called the first pages) is returned to the DE.&lt;br/&gt;	9.	The DE sends the first pages to the author for validation. If there are problems with command spacing, figure or information layout, the author will add the relevant notes to the PDF (using the Comments feature of Adobe Acrobat) before returning it to the DE. This is called a page proof (PP).  &lt;br/&gt;	10.	The DE sends the PP to the production department, who fix any problems and create another PDF (called the second pages) that is ready for print.&lt;br/&gt; &lt;br/&gt;It is important to note that steps 1 through 10 are performed concurrently for different chapters on a project. As an author, you may be writing the AU1 for Chapter 5 while you are working on the AU2 for Chapter 3 and PP for Chapter 1. So you&#x2019;ll need to check your schedule often and be comfortable juggling multiple different tasks simultaneously.&lt;br/&gt;&lt;br/&gt;The prerequisites:&lt;br/&gt;Every author will tell you that authoring isn&#x2019;t for everyone. Creating content is always more difficult than it looks, and takes time and practice to master. In addition, &lt;br/&gt;	&#x2022;	You must master the English language and be able to generate structured prose quickly, without having to rewrite it multiple times. If you are an avid reader, you&#x2019;ll likely be a great author. If you need to rely on the Grammarly plugin, then authoring probably isn&#x2019;t for you.&lt;br/&gt;	&#x2022;	You must master the associated technical subject matter, as well as be a skilled teacher. Technical concepts must be structured and worded in a way that can be easily understood by readers. As Albert Einstein said, &#x201C;If you can't&#xA0;explain it simply,&#xA0;you&#xA0;don't understand it well enough.&#x201D;&lt;br/&gt;	&#x2022;	You must avoid using idioms that other cultures will have difficulty understanding.&lt;br/&gt;	&#x2022;	You must use direct language. For example, use in instead of within, and you will instead of a person will. The third person is for research papers only.&lt;br/&gt;&lt;br/&gt;Other tips:&lt;br/&gt;	&#x2022;	Planning is the most important part of an authoring project. I often spend 2-3 weeks at the beginning of each authoring project to plan the structure of each major and minor topic for all chapters (including the major tasks performed in each lab exercise).&lt;br/&gt;	&#x2022;	Your software setup is vital during a project. Rely on virtual machines, and take snapshots regularly so that you can return to a previous state to test something later on.&lt;br/&gt;	&#x2022;	Don&#x2019;t use MacBooks to write anything (their keyboards are garbage and you won&#x2019;t get much done). If you have to use a MacBook for vanity reasons, go out and purchase a good USB keyboard to use with it.&lt;br/&gt;	&#x2022;	Remember that nothing goes smoothly in an authoring project. There will be times where a format or convention change requires that you revisit previous chapters, or times when a TE or reviewer is late submitting material, pushing back other deadlines. Never let these things stress you out, and keep current with each schedule change.&lt;br/&gt;	&#x2022;	Stay caffeinated. Purchase enough coffee at the beginning of the project to last for about half the project duration, and keep it varied (mostly dark roast). For example, the following is what you&#x2019;ll need for the first half of a 12 chapter textbook:&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;How do I break into textbook writing?&lt;br/&gt;I get this question frequently. My response is always &#x201C;Why? Are you a masochist?&#x201D;&lt;br/&gt;But if you possess the right qualities to be a good author, the best way to break into textbook writing is to reach out to an acquisitions editor at a publisher (you can find them on LinkedIn) and let them know your background and areas of strength. In general, new book projects typically go to veteran authors for obvious reasons. However, when a publisher has a need for a book in a new topic area where an existing author is unavailable, you may be offered the book project!</description>
      <iweb:image href="Media/object001_1.jpg"></iweb:image>
      <iweb:comment enabled="0" count="0" link="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/2/19_How_to_write_an_academic_technical_textbook.html#comment_layer"></iweb:comment>
    </item>
    <item>
      <title>I finally beat Tetris</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/1/23_I_finally_beat_Tetris.html</link>
      <guid isPermaLink="false">9d8c4474-ecd6-4541-ac2d-fd9fe9d8d057</guid>
      <pubDate>Thu, 23 Jan 2020 16:35:15 -0500</pubDate>
      <description>I&#x2019;ve finally done it. &lt;br/&gt;I&#x2019;ve beaten the game Tetris.&lt;br/&gt;&lt;br/&gt;More specifically, Atari 2-player arcade Tetris, which is the best version of Tetris ever released (in my opinion) and the one that was available in arcades before Nintendo secured the rights to the game from the Soviet Union.&lt;br/&gt;&lt;br/&gt;A few years ago, my daughter and I picked up a Taito arcade cabinet that I restored to play Tetris using the original Atari arcade game printed circuit board (PCB) as shown in the picture to the right: &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;I accidentally smashed the neck of the CRT monitor when removing it, so I installed a Wells-Gardner arcade LCD (which takes the CGA video signals generated by the Atari Tetris game PCB inside the cabinet), as well as a matching HAPP bezel to make it look great, as shown below.&lt;br/&gt;&lt;br/&gt;And I&#x2019;ve played it quite a bit - Tetris has always been one of my favorite games, and is a great way of relieving stress and regaining focus after a long day.&lt;br/&gt;&lt;br/&gt;Today, as I was playing around the 50,000 point mark, the screen paused and started jumbling up the characters. &lt;br/&gt;&lt;br/&gt;Rebooting the game didn&#x2019;t help. &lt;br/&gt;&lt;br/&gt;I put the game PCB in another working arcade cabinet to verify that it was indeed the PCB that had failed.&lt;br/&gt;&lt;br/&gt;Yes, that&#x2019;s right. The game PCB died during gameplay, leaving me the clear winner.&lt;br/&gt;&lt;br/&gt;Like any game trophy, I&#x2019;m going to frame the PCB and stick it on the wall in my rec room. &lt;br/&gt;&lt;br/&gt;As for the Tetris arcade?  Well, it&#x2019;s a good thing I bought a spare Tetris PCB on eBay last year so that I can get my Tetris fix tonight ;-)</description>
      <iweb:image href="Media/object001_2.jpg"></iweb:image>
      <iweb:comment enabled="0" count="0" link="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/1/23_I_finally_beat_Tetris.html#comment_layer"></iweb:comment>
    </item>
    <iweb:dateFormat>EEEE, MMMM d, y</iweb:dateFormat>
    <iweb:baseURL>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog</iweb:baseURL>
    <iweb:maximumSummaryItems>8</iweb:maximumSummaryItems>
  </channel>
</rss>
