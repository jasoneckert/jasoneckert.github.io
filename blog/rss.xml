<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:iweb="http://www.apple.com/iweb" version="2.0">
  <channel>
    <title></title>
    <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/blog.html</link>
    <description> </description>
    <generator>iWeb 3.0.2</generator>
    <image>
      <url>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/blog_files/blog-immobilier.jpg</url>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/blog.html</link>
    </image>
    <item>
      <title>I finally beat Tetris</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/1/23_I_finally_beat_Tetris.html</link>
      <guid isPermaLink="false">9d8c4474-ecd6-4541-ac2d-fd9fe9d8d057</guid>
      <pubDate>Thu, 23 Jan 2020 16:35:15 -0500</pubDate>
      <description>&lt;a href=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/1/23_I_finally_beat_Tetris_files/droppedImage.jpg&quot;&gt;&lt;img src=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Media/object001_3.jpg&quot; style=&quot;float:left; padding-right:10px; padding-bottom:10px; width:216px; height:123px;&quot;/&gt;&lt;/a&gt;I’ve finally done it. &lt;br/&gt;I’ve beaten the game Tetris.&lt;br/&gt;&lt;br/&gt;More specifically, Atari 2-player arcade Tetris, which is the best version of Tetris ever released (in my opinion) and the one that was available in arcades before Nintendo secured the rights to the game from the Soviet Union.&lt;br/&gt;&lt;br/&gt;A few years ago, my daughter and I picked up a Taito arcade cabinet that I restored to play Tetris using the original Atari arcade game printed circuit board (PCB) as shown in the picture to the right: &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;I accidentally smashed the neck of the CRT monitor when removing it, so I installed a Wells-Gardner arcade LCD (which takes the CGA video signals generated by the Atari Tetris game PCB inside the cabinet), as well as a matching HAPP bezel to make it look great, as shown below.&lt;br/&gt;&lt;br/&gt;And I’ve played it quite a bit - Tetris has always been one of my favorite games, and is a great way of relieving stress and regaining focus after a long day.&lt;br/&gt;&lt;br/&gt;Today, as I was playing around the 50,000 point mark, the screen paused and started jumbling up the characters. &lt;br/&gt;&lt;br/&gt;Rebooting the game didn’t help. &lt;br/&gt;&lt;br/&gt;I put the game PCB in another working arcade cabinet to verify that it was indeed the PCB that had failed.&lt;br/&gt;&lt;br/&gt;Yes, that’s right. The game PCB died during gameplay, leaving me the clear winner.&lt;br/&gt;&lt;br/&gt;Like any game trophy, I’m going to frame the PCB and stick it on the wall in my rec room. &lt;br/&gt;&lt;br/&gt;As for the Tetris arcade?  Well, it’s a good thing I bought a spare Tetris PCB on eBay last year so that I can get my Tetris fix tonight ;-)</description>
      <enclosure url="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2020/1/23_I_finally_beat_Tetris_files/droppedImage.jpg" length="61786" type="image/jpeg"/>
    </item>
    <item>
      <title>2019 in review...</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/12/22_2019_in_review....html</link>
      <guid isPermaLink="false">60c2c26f-fa7c-4041-81e5-e551e89401b7</guid>
      <pubDate>Sun, 22 Dec 2019 07:59:37 -0500</pubDate>
      <description>&lt;a href=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/12/22_2019_in_review..._files/20190802_172742.jpg&quot;&gt;&lt;img src=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Media/object010_1.jpg&quot; style=&quot;float:left; padding-right:10px; padding-bottom:10px; width:216px; height:123px;&quot;/&gt;&lt;/a&gt;This year was flat-out awesome! I can’t think of many years in the past decade that had the same amount of academic, physical, and personal fulfillment all in one year!&lt;br/&gt;&lt;br/&gt;On the academic side, I presented a 12-week Linux+ webinar series at night to IT instructors worldwide for the Computing Technology Industry Association (CompTIA)  Instructor Network. &lt;br/&gt;&lt;br/&gt;This, of course, fit well since I just finished writing the 5th edition of my Linux textbook for Cengage (Linux+ &amp;amp; LPIC Guide to Linux Certification). &lt;br/&gt;&lt;br/&gt;The participants loved the series and material I created for them, and I was told it definitely raised the bar for these sessions! And with their votes, I won the Outstanding Train the Trainer award from CompTIA at their summit in Las Vegas!  &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Outside of my day job teaching and doing curriculum for our IT programs at the college, I also did a lot of tech editing and reviewing for various Linux books, as well as worked on a lot of development and devops-related projects for several startups and incubators in the Waterloo region. Because I’ve done so much of this over the past few years, I get a lot of people wanting me on their team and have the rare privilege of getting to choose what projects I want to work on. So I naturally choose the ones that are the coolest!&lt;br/&gt;&lt;br/&gt;Oh, and I’m currently writing a book on Windows Server 2019 administration for Cengage. Since it’s also published in the National Geographic store, I guess you could say that I’m writing a book depicting Windows Server 2019 in its natural habitat ;-) &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;On the computing side, I got an expensive status symbol - the new 16” MacBook Pro with the highest available specs (Core i9, 64GB RAM, 8TB SSD) to help make some *stuff* happening at work a lot more palatable.  &lt;br/&gt;&lt;br/&gt;It’s the first laptop from Apple in a very long time that actually has a functional keyboard (with an Esc key!), and proper cooling so that the i9 doesn’t thermal throttle. It’s probably also the first time ever that Apple listened to customer complains about their products too ;-)&lt;br/&gt;&lt;br/&gt;Ironically, it’s still slower for my devops work (VMs, containers, dev tools) compared to my Thinkpad P52S. Plus the Thinkpad still has a far better keyboard and build quality. My goal now is to fill that storage!&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;I also received a surprise gift this month from CompTIA with a Raspberry Pi 4 kit. While many of my peers rave about Raspberry Pis, I’ve never played with one before. And it was a real eye-opener. They run Linux surprisingly fast. Browsing the Web with Chromium is as fast as on a PC, and 4K content displays perfectly. Plus, the templates for taking advantage of the GPIO port are brilliant, and easy to code around in Python. &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;On the vintage computing side, I picked up a couple of really cool ancient UNIX systems. The first one is a &lt;a href=&quot;Entries/2019/3/14_SPARCbook_3000ST_-_The_coolest_90s_laptop.html&quot;&gt;SPARCbook 3000ST&lt;/a&gt;, which was a $20K laptop from the 90s that every UNIX geek wanted (it had a SPARC processor running Solaris UNIX). Since it has VGA output, I even did a presentation with it (irony is not dead):&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;The second one is an &lt;a href=&quot;Entries/2019/11/25_The_secret_to_success_for_working_in_tech.html&quot;&gt;ancient UNIX workstation&lt;/a&gt; with a NS32016 CPU (the first 32-bit general purpose microprocessor) running Genix (BSD UNIX for the NS32016). To my knowledge, this is the only Genix system left in the world! I’m currently restoring it to its former glory. &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;On the personal side, I still eat well and get plenty of exercise. I walk everywhere and count calories. I ran a marathon in Toronto in May - my feet spent a week recovering, but I loved it! Plus, it definitely helps that I live right next to a running track (you can just see my house in the distance between the trees):&lt;br/&gt;&lt;br/&gt;&lt;br/&gt; &lt;br/&gt;But perhaps the coolest part of this year was my taking 4 weeks off this summer to do some amazing day trips with my daughter before she left for Australia for a 1-year work term. We did a lot of hiking, saw a lot of waterfalls, and explored some amazing places all around Ontario, some of them accidental (like the HMCS Ojibwa submarine used to track Soviet vessels during the Cold War).  Plus, I even broke down and bought a Hawaiian shirt like all the hip young people wear ;-)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt; &lt;br/&gt;While I had a pretty amazing year, I hope that you did too! &lt;br/&gt;Here’s to a healthy and prosperous 2020 for everyone!&lt;br/&gt;:wq</description>
      <enclosure url="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/12/22_2019_in_review..._files/20190802_172742.jpg" length="167622" type="image/jpeg"/>
    </item>
    <item>
      <title>Reviving an ancient BSD UNIX workstation</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/11/25_The_secret_to_success_for_working_in_tech.html</link>
      <guid isPermaLink="false">57289765-843d-404c-a8d1-cee292c591ed</guid>
      <pubDate>Mon, 25 Nov 2019 15:20:21 -0500</pubDate>
      <description>&lt;a href=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/11/25_The_secret_to_success_for_working_in_tech_files/20191124_161032.jpg&quot;&gt;&lt;img src=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Media/object003_1.jpg&quot; style=&quot;float:left; padding-right:10px; padding-bottom:10px; width:226px; height:123px;&quot;/&gt;&lt;/a&gt;Most people will look at this 3-foot-long behemoth of ancient electronics and wonder why it wasn’t scrapped decades ago. But for many of us in the tech industry, these ancient machines are a way to peer into the early days of an industry that has twisted and evolved in leaps and bounds, leaving nearly every player that shaped its landscape forgotten in time.&lt;br/&gt;&lt;br/&gt;The machine sitting in my driveway at the top of this post is a workstation from the early 1980s with a NS32016 CPU (the first 32-bit general purpose microprocessor) and a whopping 1MB of RAM. It's running Genix (BSD UNIX for the NS32016) and performs at a speed of 2.5 MIPS. For comparison, a modern AMD Ryzen 7 system performs at over 300,000 MIPS. &lt;br/&gt;&lt;br/&gt;The person that gave it to me originally built it for the company he was working for at the time. It was to be a graphics workstation that would compete with the other high-end workstation vendors at the time (Sun Microsystems and Silicon Graphics Inc.).  In many ways, it was a revolutionary design for the 1980s as it used a microprocessor that was heavily influenced by the orthogonal design of the DEC VAX (the leading UNIX platform at the time). It also supported demand paging (which was unusual for that time, but later became the standard in CPUs.&lt;br/&gt;&lt;br/&gt;The 40MB hard drive from Computer Memories Inc. is as heavy as a dodge ball, and each circuit board in the computer provides a discrete function. There’s a CPU board, a disk controller board, a memory board, and a serial I/O board - all of which plug into a backplane so that they can talk to each other. Together with the myriad of ribbon cables connecting these boards to external components, it’s reminiscent of the mainframe systems that wandered the Earth in the 1960s.&lt;br/&gt;&lt;br/&gt;To get UNIX started on it, and interface with it from a computer terminal requires that you pour though manuals and schematics, ensure that each board is getting the correct voltage and current, as well as connect serial I/O in a way that it expects. It’s sort of like decoding hieroglyphs in ancient Egypt. But the reward is the same - to understand something that was lost to time. But while this computer was lost to history, the UNIX operating system it ran went on to become the most influential operating system of all time, leading to Linux, Android, macOS, iOS and nearly every system you talk to in the cloud.&lt;br/&gt;&lt;br/&gt;</description>
      <enclosure url="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/11/25_The_secret_to_success_for_working_in_tech_files/20191124_161032.jpg" length="149865" type="image/jpeg"/>
    </item>
    <item>
      <title>Why you should use technology less</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/10/6_Why_you_should_use_technology_less.html</link>
      <guid isPermaLink="false">4f6aa8b8-10d0-44b2-ab80-092c8d93e0cd</guid>
      <pubDate>Sun, 6 Oct 2019 18:06:26 -0400</pubDate>
      <description>&lt;a href=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/10/6_Why_you_should_use_technology_less_files/droppedImage.jpg&quot;&gt;&lt;img src=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Media/object002_2.jpg&quot; style=&quot;float:left; padding-right:10px; padding-bottom:10px; width:216px; height:123px;&quot;/&gt;&lt;/a&gt;Over the past few years, I’ve taken to using technology less and less in my daily life. &lt;br/&gt;	•	I leave my phone in the car when going to a party or social event. I’ll only fetch it if I want to take a picture, and only after appreciating the moment I’d like to capture to the fullest. &lt;br/&gt;	•	When I listen to music on my phone (via headphones) during the long walks I take to get exercise and relax, I don’t check my phone at all. If the environment around me is interesting enough, I’ll stop the music to take in the sounds around me.&lt;br/&gt;	•	I limit the time I spend perusing social media to 15 minutes at a time, and only when I’m in a relaxed mood, often in the evening. If I’m sent an interesting article during the day, I’ll quickly post it to LinkedIn/Twitter to share with others who could benefit from it, but not use that opportunity to browse other’s posts.&lt;br/&gt;	•	When it comes to work commitments, I will call or meet with people when possible, rather than message or email them. &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;A decade ago, my habits were entirely different:&lt;br/&gt;	•	I was tethered to my BlackBerry smartphone. &lt;br/&gt;	•	Social media was a drug addiction, and I had no desire to quit. &lt;br/&gt;	•	Personal relationships had to fit my digital lifestyle, and my life was online all the time.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Unfortunately, if you replace the word BlackBerry with an iPhone or Android phone, you’ll describe many of the people I know today.&lt;br/&gt;&lt;br/&gt;But why?!?&lt;br/&gt;&lt;br/&gt;Jonathan Safran Foer wrote an article in the New York Times 5 years ago that described our increasingly disturbing relationship with technology over the years:&lt;br/&gt;&lt;br/&gt;“Most of our communication technologies began as diminished substitutes for an impossible activity. We couldn’t always see one another face to face, so the telephone made it possible to keep in touch at a distance. One is not always home, so the answering machine made a kind of interaction possible without the person being near his phone.&lt;br/&gt;&lt;br/&gt;But then a funny thing happened — we began to prefer the diminished substitute.&lt;br/&gt;&lt;br/&gt;The problem with accepting — with preferring — diminished substitutes is that over time, we, too, become diminished substitutes. People who become used to saying little become used to feeling little.”&lt;br/&gt; &lt;br/&gt;Technology has tremendous benefits, but when used improperly can become a diminished substitute for the joys of life. I read the article, but it didn’t strike a chord with me until a few years later when events surrounding me left me remembering its message. It was then that I started changing my technology views and habits for the better.&lt;br/&gt;&lt;br/&gt;I’m not alone, however. Until last year, I worked with a brilliant programmer who never had a smartphone. A laptop with Skype provided him the ability to talk with others face-to-face, and an iPad provided portable Internet when needed. At the time, I thought this was absurd, but today I applaud his ability to choose technology that didn’t diminish his ability to enjoy life.&lt;br/&gt;&lt;br/&gt;I hope this blog post inspires you to refine your relationship with technology to enjoy all that life can give you! </description>
      <enclosure url="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/10/6_Why_you_should_use_technology_less_files/droppedImage.jpg" length="64375" type="image/jpeg"/>
    </item>
    <item>
      <title>What it’s like a year after quitting Facebook</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/9/20_What_its_like_a_year_after_quitting_Facebook.html</link>
      <guid isPermaLink="false">006c2bd0-7c8e-48b9-a24e-2fa358e0ef92</guid>
      <pubDate>Fri, 20 Sep 2019 17:41:36 -0400</pubDate>
      <description>&lt;a href=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/9/20_What_its_like_a_year_after_quitting_Facebook_files/droppedImage.jpg&quot;&gt;&lt;img src=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Media/object001_2.jpg&quot; style=&quot;float:left; padding-right:10px; padding-bottom:10px; width:216px; height:123px;&quot;/&gt;&lt;/a&gt;Just under a year ago, &lt;a href=&quot;Entries/2018/10/3_Why_I_removed_all_of_my_Facebook_data.html&quot;&gt;I quit Facebook&lt;/a&gt;. Yup. After a decade of using it frequently, with over 10,000 posts and 7,000 pictures.&lt;br/&gt;&lt;br/&gt;It was the best decision I made.&lt;br/&gt;&lt;br/&gt;The original premise of Facebook has always appealed to me: connect with others you know in real life, but online, in order to share pictures and information to keep current. But it also has a lot of negatives: &lt;br/&gt;	•	It often becomes your main method of communication to others. &lt;br/&gt;	•	People who are manipulative in your life use it to be more so.&lt;br/&gt;	•	You often friend others you don’t know. &lt;br/&gt;	•	You end up spending tons of time scrolling through posts, and check for new ones frequently during the day. &lt;br/&gt;	•	You are constantly seeing posts from outside your friend network that are specifically crafted to influence your thought process.&lt;br/&gt;&lt;br/&gt;So, what happens when you quit for a year?&lt;br/&gt;	•	You feel like you’ve regained a much healthier relationship with the world around you. &lt;br/&gt;	•	You spend less time using technology, and the time you do spend is not wasted.&lt;br/&gt;	•	The people that matter keep talking to you (yes, actually talking, and not stalking).&lt;br/&gt;	•	If you need to text someone, you actually text their phone number (that they gave you in person) instead of using Facebook Messenger, or send them an email.&lt;br/&gt;	•	You become more perceptive when talking with others (subtle nuances are appreciated, and so on).&lt;br/&gt;	•	You leave your phone at home or in the car before going to social events, because you prefer to give your 100% at the event. &lt;br/&gt;	•	You notice people checking their phone in line at Starbucks and feel pity for them.&lt;br/&gt;	•	You realize that “If you're not paying for it, you're not the customer - you're the one being sold.”&lt;br/&gt;&lt;br/&gt;Have I quit all social media? No. There are some other social media that I still use for very short periods of time during the day. I still use LinkedIn to build my professional reputation, and Twitter to follow fun people in my professional field. The quality of what I read on these two sites is well worth the very small amount of time I spend on them. And I still post the odd picture I want to share with others on Instagram.&lt;br/&gt;&lt;br/&gt;So, if you’re thinking of ditching Facebook, here’s my honest advice:&lt;br/&gt;Don’t ask anyone whether you should do it. &lt;br/&gt;Just do it. &lt;br/&gt;And be in control of how you communicate and when you use technology.&lt;br/&gt;It’s quite liberating.</description>
      <enclosure url="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/9/20_What_its_like_a_year_after_quitting_Facebook_files/droppedImage.jpg" length="29277" type="image/jpeg"/>
    </item>
    <item>
      <title>How to learn vi (vim)</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/8/27_How_to_learn_vi_%28vim%29.html</link>
      <guid isPermaLink="false">2a5d292a-ad8a-4e0a-8d16-0e0e8eae7d7b</guid>
      <pubDate>Tue, 27 Aug 2019 10:01:40 -0400</pubDate>
      <description>&lt;a href=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/8/27_How_to_learn_vi_%28vim%29_files/droppedImage_2.jpg&quot;&gt;&lt;img src=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Media/object001_2.jpg&quot; style=&quot;float:left; padding-right:10px; padding-bottom:10px; width:247px; height:124px;&quot;/&gt;&lt;/a&gt;I’ve been a UNIX (and later Linux) user/developer/sysadmin for over 30 years, and have taught UNIX and Linux topics, including the vi text editor, in the college space for over 20 years.  &lt;br/&gt;&lt;br/&gt;1. So, what is vi (and vim)?&lt;br/&gt;&lt;br/&gt;One of the most important tools for any developer or sysadmin on UNIX and Linux systems is a text editor. Mastering a text editor allows you to quickly create and edit the source code for programs, scripts and configuration files (nearly all configuration on a UNIX/Linux system is stored as text).&lt;br/&gt;&lt;br/&gt;The vi editor has been one of the most common (if not THE most common) text editor on these systems since it was created in 1969 by Bill Joy. It was a visual extension to the 1969 ex line-based text editor used back when UNIX terminals looked like a printer with a keyboard, and you had to edit an existing text file using obscure commands (without seeing the actual file on your screen):&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Then, Bram Moolenaar created a version of the vi editor with extended functionality in 1991 and called it vim (vi improved). Nearly all UNIX and Linux systems today use vim, but we still refer to it as vi (the vi executable is typically a shortcut to the vim executable). As a result, from this point on, I’ll just refer to it as vi.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;2. Why should I learn vi? Isn’t it difficult to use?&lt;br/&gt;&lt;br/&gt;For people who open vi for the first time, it may seem difficult since it doesn’t present visual cues on the screen that tell you how to use it.  Of course, this has led to a plethora of vi-related humor on the Internet:&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;But vi isn’t difficult to use at all.&lt;br/&gt;It merely has a small learning curve at the beginning. &lt;br/&gt;In short, it’s: &lt;br/&gt;	•	Very fast for any purpose&lt;br/&gt;	•	Easily addictive, with a 1 day learning curve (for the basics)&lt;br/&gt;	•	Powerful (800+ built-in functions with plugins &amp;amp; customization ability)&lt;br/&gt;	•	Found standard on nearly all UNIX flavors and Linux distributions&lt;br/&gt;	•	A vi-able skill for any UNIX/Linux sysadmin, user or developer&lt;br/&gt;&lt;br/&gt;As a quick note, the other powerful text editor for UNIX/Linux is Emacs, but it’s not nearly as fast as vi, and if you use it too much, you’ll end up with a LISP ;-)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;3. How do I learn vi?&lt;br/&gt;&lt;br/&gt;The quickest and easiest way to learn the vi editor is to first focus on essential vi functionality only (what I call the survival skills) using some sample text files, and then expand upon that functionality later on.  &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;4. Learning the survival skills&lt;br/&gt;&lt;br/&gt;You can run the following commands to obtain some sample text files on your system, and edit the file called “letter” using the vi editor:&lt;br/&gt;&lt;br/&gt;  git clone https://github.com/jasoneckert/classfiles.git&lt;br/&gt;  cd classfiles&lt;br/&gt;  vi letter &lt;br/&gt;&lt;br/&gt;The cursor is automatically placed at the beginning of the file. The easiest way to navigate the file is to use the cursor (arrow) keys, or PageUp/PageDown. You’ll know when you reach the end of the file, because vi displays ~ (tilde) characters at the bottom. Before you edit or add text, you must first understand that vi has two modes. When you first open the vi editor, you are placed in COMMAND MODE, where every key and key combination on your keyboard represents a function (e.g. pressing the x key will delete the character your cursor is on). A handful of these functions take you to INSERT MODE, where the keys on your keyboard are actually used to type/edit text (e.g. pressing the x key will insert the letter x in your document).  To return back to COMMAND MODE after inserting/editing text, simply press the [Esc] key. &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Common functions that allow you to enter INPUT MODE include:&lt;br/&gt;  a    start appending text after current character&lt;br/&gt;  i    start inserting text before current character&lt;br/&gt;  o    open a new line underneath the cursor to insert text&lt;br/&gt;  A    start appending text after current line&lt;br/&gt;  I    start inserting text at the beginning of the current line&lt;br/&gt;  O    open a new line above the cursor to insert text&lt;br/&gt;  c    start inserting text on the character that you are on&lt;br/&gt;  r    replace one character only&lt;br/&gt;&lt;br/&gt;Common functions used when in COMMAND MODE:&lt;br/&gt;  yy            yank a line of text to the buffer&lt;br/&gt;  y3y or 3yy    yank 3 lines of text to the buffer&lt;br/&gt;  y3w 3yw       yank 3 words of text to the buffer&lt;br/&gt;  p             paste the contents of the buffer below the current line&lt;br/&gt;  P             paste the contents of the buffer above the current line&lt;br/&gt;  dd            delete the current line&lt;br/&gt;  d3d or 3dd    delete 3 lines&lt;br/&gt;  d5w 5dw       delete 5 words&lt;br/&gt;  x             delete the current character&lt;br/&gt;  3x            delete 3 characters (starting with the current character)&lt;br/&gt;  J             join lines (join line below you to current line)&lt;br/&gt;  u             undo last change&lt;br/&gt;  [Ctrl]+g      current line stats&lt;br/&gt;&lt;br/&gt;  :             takes you to the interactive : prompt (called ex mode)&lt;br/&gt;  :wq           save and quit&lt;br/&gt;  :w lala       save as file lala&lt;br/&gt;  :q            quit (if no changes were made)&lt;br/&gt;  :q!           quit and throw away any changes&lt;br/&gt;  :set all      to see all vi environment parameters&lt;br/&gt;  :set number   to set auto line numbering&lt;br/&gt;  :set nonumber to unset auto line numbering&lt;br/&gt;  ZZ            save and quit (same as :wq)&lt;br/&gt;&lt;br/&gt;Spend some time practicing the functions in COMMAND MODE within the “letter” file, including the functions that take you to INSERT MODE.  Insert and delete as much text as you want. Then, hold down the u key in COMMAND MODE to undo all of your changes and use :q to quit the editor.  Next, type vi small_town (a joke file with a lot of typos) and use these same survival skills to fix all of the typos. This time, save your changes using :wq in COMMAND MODE.&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;5. I’ve mastered the survival skills. Now what?&lt;br/&gt;&lt;br/&gt;There’s no shortage of things to do after mastering the survival skills. However, I’ve listed those that I find the most useful below, organized by area:&lt;br/&gt;&lt;br/&gt;Navigation in COMMAND MODE (beyond the cursor keys and PageUp/PageDown):&lt;br/&gt;  h j k l   alternatives to the cursor keys for navigation&lt;br/&gt;  1G        go to line 1&lt;br/&gt;  23G       go to line 23&lt;br/&gt;    G         go to the last line&lt;br/&gt;  ^         go to beginning of the current line &lt;br/&gt;  $         go to beginning of the current line&lt;br/&gt;  d$        delete from cursor to end of the current line&lt;br/&gt;  d^        delete from cursor to the beginning of the current line&lt;br/&gt;&lt;br/&gt;Any set options in ex mode can be made permanent for all users by editing the /usr/share/vim/vimrc file, or for just your user account by creating a .vimrc or .exrc file in your home directory (e.g. vi ~/.vimrc). The most common options that I place in this file turn on line numbering (number), cursor position (ruler), highlighting of brackets (showmatch), tabs that are equivalent to 4 spaces (ts=4 - the default is 8, which is too much), and programming language highlights (syntax):&lt;br/&gt;  set number ruler showmatch ts=4&lt;br/&gt;  syntax on&lt;br/&gt;&lt;br/&gt;Useful functions in COMMAND MODE:&lt;br/&gt;  /Mother   searches for Mother (n = next occurrence, N = previous occurrence)&lt;br/&gt;  ?Mother   the same search, but in the reverse direction (earlier lines)&lt;br/&gt;  ~         switch case for current letter &lt;br/&gt;  gUU       turn entire line to uppercase&lt;br/&gt;    ddp       swap current line with the next one&lt;br/&gt;  zf5j      fold the next 5 lines (zo = open/expand, zc = close, zd = delete)&lt;br/&gt;   &lt;br/&gt;Useful commands in ex mode (the : prompt):&lt;br/&gt;  :% s/the/THE/g     search for the and replace with THE in the whole file&lt;br/&gt;  :1,7 s/the/THE/g   same as previous, but only on lines 1 through 7&lt;br/&gt;  :ab LR Linux Rocks when you type LR in INSERT MODE, replace with Linux Rocks &lt;br/&gt;                        ***this can be put into your .vimrc or .exrc file too!&lt;br/&gt;    :r proposal1       insert the contents of the proposal1 file under the current line &lt;br/&gt;    :r !date           insert the output of the date command under the current line&lt;br/&gt;    :help p            display help for functions that start with p&lt;br/&gt;    :help holy-grail   displays help for all ex mode commands&lt;br/&gt;    :e proposal1       edit a new file (proposal1) instead of current file&lt;br/&gt;    :split proposal1   edit proposal1 in a new split screen (horizontal)&lt;br/&gt;    :vsplit proposal1  edit proposal1 in a new split screen (vertical)&lt;br/&gt;                          ***you can use [Ctrl]+ww to move between screens, or&lt;br/&gt;                            [Ctrl]+w, _ to minimize current screen, or [Ctrl]+w, = to &lt;br/&gt;                                                   restore current screen to original size.&lt;br/&gt;    :tabe lala         create a new tab called lala&lt;br/&gt;    :tabs              show tabs&lt;br/&gt;    :tabn              move to next tab&lt;br/&gt;    :tabp              move to previous tab&lt;br/&gt;    :set rightleft     a fun prank (especially if you put it in someone else’s .vimrc ;-)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;6. Still want more?&lt;br/&gt;&lt;br/&gt;Run the vimtutor command! This opens a lengthy interactive vi tutorial within vi itself. &lt;br/&gt;If this command isn’t available on your Linux system, it’s because your Linux distribution installed the minimal vim package. Simply run dnf install vim or apt install vim (depending on your Linux distribution) to get the full vim package that includes the vim tutor!</description>
      <enclosure url="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/8/27_How_to_learn_vi_%28vim%29_files/droppedImage_2.jpg" length="34838" type="image/jpeg"/>
    </item>
    <item>
      <title>What Nokia tells us about the Internet in 2008</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/8/17_What_Nokia_tells_us_about_the_Internet_in_2008.html</link>
      <guid isPermaLink="false">d7fa05e1-cbf0-484c-90f9-59fe01b37c67</guid>
      <pubDate>Sat, 17 Aug 2019 13:02:48 -0400</pubDate>
      <description>&lt;a href=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/8/17_What_Nokia_tells_us_about_the_Internet_in_2008_files/20190817_164236.jpg&quot;&gt;&lt;img src=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Media/object000_4.jpg&quot; style=&quot;float:left; padding-right:10px; padding-bottom:10px; width:216px; height:123px;&quot;/&gt;&lt;/a&gt;While cleaning out a drawer last night, I came across my old, beloved Nokia N810 Internet appliance that I bought in early 2008. This thing was sexy and entirely made of aluminum. It had a touchscreen (and stylus), backlit slide-out keyboard, expandable SD storage, GPS and front-facing webcam running Maemo Linux on an ARM CPU. &lt;br/&gt;&lt;br/&gt;The N810 came out shortly after the iPhone in 2007, and just before Android phones started hitting the market en mass in 2008. But the N810 was not a phone at all.  Instead, it was a portable WiFi-only, Internet-in-your-pocket device, and something that appealed tremendously to me when I first saw it reviewed on the GeekBrief podcast with Cali Lewis.  Better yet, using the promo code on the podcast gave you 20% off and free shipping if you were in the US. When I phoned Nokia, they gladly honored the deal for me in Canada, and I scored one for under $400 CDN.&lt;br/&gt;&lt;br/&gt;After turning it on again today, I was reminded of how polished Maemo Linux is, and how well it runs apps, even by today’s standards. Of course, the version of Skype installed is no longer supported and both the default and Opera web browsers work extremely slow with modern websites, if at all.  But everything else runs fast, including Quake.&lt;br/&gt;&lt;br/&gt;Each N810 shipped with a promotional video that summed up its appeal at the time in 2008, and watching it again brought me back to that time where the Internet had become incredibly important in our everyday lives and taking it with us was what we wanted to do: &lt;a href=&quot;https://www.youtube.com/watch?v=IaIfNZSuzO4&quot;&gt;https://www.youtube.com/watch?v=IaIfNZSuzO4&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;The video dropped a ton of terms (Web 2.0, Facebook, Flickr, Youtube, Myspace, social networks, RSS feeds, blogs, GPS, Craigslist, podcasts, etc.) as well as gave us some pretty amazing quotes from different people:  &lt;br/&gt;	•	Giving us new ways to record things that happen in our lives&lt;br/&gt;	•	You need this online world with you at all times&lt;br/&gt;	•	It’s all totally accessible &lt;br/&gt;	•	Technology is now for everybody&lt;br/&gt;	•	If you can do it, you can do it online&lt;br/&gt;	•	I’ve been learning how to crochet now from some woman in China&lt;br/&gt;	•	Technology has been able to become better because of the user&lt;br/&gt;	•	The Web is a platform; as much as you take, you can give back&lt;br/&gt;	•	The Web has become a place for people to express themselves; it’s an environment that’s being created by the people who are using it&lt;br/&gt;	•	My online life IS my life - how I socialize, how I work, how I communicate, how I live&lt;br/&gt;	•	It’s a rocket ship that has taken off - coincidentally, you can’t stop it&lt;br/&gt;	•	I get to express myself every day&lt;br/&gt;	•	You can just connect with everyone - it’s a community - everything is done collaboratively&lt;br/&gt;	•	It’s a deeply rich social technology&lt;br/&gt;	•	It’s freedom&lt;br/&gt;	•	Ego actually has more value than dollars (my favorite quote ;-)&lt;br/&gt;&lt;br/&gt;In short, it’s an optimistic video from an optimistic time, where security and privacy were miniscule footnotes in a fast-moving world where people just wanted to do and share more online, from anywhere. I miss those times.</description>
      <enclosure url="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/8/17_What_Nokia_tells_us_about_the_Internet_in_2008_files/20190817_164236.jpg" length="72804" type="image/jpeg"/>
    </item>
    <item>
      <title>The different faces of open source software</title>
      <link>http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/8/9_The_different_faces_of_open_source_software.html</link>
      <guid isPermaLink="false">41c90387-58d5-415c-adc7-c2ff1082a22f</guid>
      <pubDate>Fri, 9 Aug 2019 12:45:23 -0400</pubDate>
      <description>&lt;a href=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/8/9_The_different_faces_of_open_source_software_files/droppedImage.jpg&quot;&gt;&lt;img src=&quot;http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Media/object000_5.jpg&quot; style=&quot;float:left; padding-right:10px; padding-bottom:10px; width:216px; height:123px;&quot;/&gt;&lt;/a&gt;The term open source has become a household term in software circles.  Most people who work with technology in some capacity know that the Linux operating system is open source, as is the Firefox Web browser and much of the software that runs on their Android phone.&lt;br/&gt;&lt;br/&gt;However, when it comes to defining open source, most people I’ve talked to aren’t that clear on what it is and how it works, but can often list these three aspects:&lt;br/&gt;	1.	It is freely/collaboratively developed&lt;br/&gt;	2.	Bugs and security loopholes can be detected and fixed much quicker than with closed source software&lt;br/&gt;	3.	It evolves much faster and to a greater extent than closed source software&lt;br/&gt;&lt;br/&gt;But what is open source, exactly?&lt;br/&gt;&lt;br/&gt;At a fundamental level, open source simply means that the source code for the software is made available to other software developers.  What other developers are allowed to do with it afterwards depends on the specific open source license that is used. In general, there are two types of open source licenses available: &lt;br/&gt;	1.	Copyleft licenses, that are promoted by the Free Software Foundation (FSF) &lt;br/&gt;	2.	Permissive licenses &lt;br/&gt;&lt;br/&gt;Copyleft licenses have more restrictions on what happens to the source code once someone modifies it.  In short, if you modify source code released under a copyleft license, you are legally bound to publicly provide the source code for your modifications. This makes copyleft licenses ideal for larger, foundational software products like the Linux operating system where long-term growth and collaboration/standardization should be mandatory.  There are many copyleft licenses available for developers to choose from. The GNU General Public License version 2 (GPLv2) provides a moderate set of restrictions on the source code, whereas GPLv3 provides a high set of restrictions that is better in line with what the FSF promotes. Some copyleft licenses, such as the Mozilla Public License (MPL), provide a lower set of restrictions compared to others but still require that modified source code is made available to others.&lt;br/&gt;&lt;br/&gt;In contrast to copyleft licenses, permissive licenses do not force software developers to publicly provide the modifications that they make to source code that they have obtained. This means that a software developer could copy the source code for software released under a permissive license and modify it for their own private or commercial use, just as long as they cite the original author of the software. This makes permissive licenses more attractive for those who want their software to be incorporated into larger systems or other projects (e.g. startups). Microsoft used the TCP/IP source code from BSD UNIX under a permissive license to create their own TCP/IP software for Windows in order to quickly get Windows on the Internet bandwagon in the 1990s. Today, about half of the underlying macOS operating system, including a third of the macOS kernel is taken from FreeBSD using a permissive license. There are many permissive licenses available, including the Massachusetts Institute of Technology (MIT), Berkeley Software Distribution (BSD) and Apache licenses. Each one varies in the fine print (copyright use, patent terms, whether modifications require notification, etc.).&lt;br/&gt; &lt;br/&gt;In the 2000s, copyleft licenses were the dominant license used for open source software, primarily because most open source software revolved around Linux.  However, with the rise of startup culture and explosion of varied software projects this past decade, permissive licenses are now more common. Moreover, permissive licenses are easier for developers to understand, and often allow developers to incorporate other open source software that use different permissive licenses. &lt;br/&gt;&lt;br/&gt;While different sites on the Internet list different market share breakdowns for open source licenses, the MIT license is often listed as the most frequently-used. The Apache and GPLv2 licenses usually take second and third place, with all others trailing far behind.  &lt;br/&gt;&lt;br/&gt;So, what is FOSS/FLOSS?&lt;br/&gt;&lt;br/&gt;Simply put, the FSF encourages people to use the term Free and Open Source Software (FOSS) when referring to open source software today. More specifically, FOSS refers to software that ethically respects the user’s freedom (use, copy, study, modify).  Since users may not completely understand that the word free was intended to refer to freedom and not price, the FSF now refers to FOSS as Free/Libre and Open Source Software (FLOSS).&lt;br/&gt;&lt;br/&gt;Since permissive licenses can potentially allow software to make its way into proprietary, closed source systems that restrict user freedom, many people in the open source community equate FOSS/FLOSS with copyleft licenses only and criticize permissive licenses for benefiting companies that want to incorporate open source software in their own closed source products. This is reflected in the &lt;a href=&quot;https://www.linuxjournal.com/content/linux-journal-ceases-publication-awkward-goodbye&quot;&gt;goodbye statement&lt;/a&gt; from the Linux Journal magazine, which ceased publication this week amid financial difficulty: &lt;br/&gt;&lt;br/&gt;&amp;quot;It became clearer than ever to me that while Linux and FOSS had won the battle over the tech giants a decade before, new ones had taken their place in the meantime, and we were letting them win.&amp;quot;&lt;br/&gt;&lt;br/&gt;While it is very true that most companies (including all of the tech giants) have incorporated a great deal of permissively-licensed open source software this past decade, I see this more as an evolutionary inevitability in the technology market. Copyleft licenses are still alive and well with many projects (e.g. Linux, the largest open source project), and these projects often provide foundational technologies to the entire industry that must remain openly-developed.  The adoption of permissively-licensed open source software by companies isn’t necessarily a bad thing - it provides continuous economic benefits that have made open source the standard for most software projects this past decade (which is why permissive licenses are more common).  In other words, it adds a healthy balance to the open source ecosystem to ensure that open source software continues to thrive.  &lt;br/&gt;&lt;br/&gt;It’s difficult to be 100% open source&lt;br/&gt;&lt;br/&gt;Even if you run Linux as your main operating system, there are still some closed source components (drivers, firmware) that you may be using on your system.  To make the user experience seamless, nearly all mainstream Linux distributions ship with these components in the installation media so that you don’t need to install them afterwards. This is why the FSF (which believes all software should be copyleft) only recommends a few obscure Linux distributions on their website that do not ship with these components (e.g. Trisquel Linux). &lt;br/&gt;&lt;br/&gt;Moreover, the low-level software that starts your computer and allows the operating system to access the hardware is not open source on most systems.  This low-level software is called the BIOS (or UEFI BIOS). And while developers have created open source replacements for the BIOS (e.g. Libreboot and Coreboot), hardware support for them are limited, in part because of other proprietary hardware components within your system and CPU.&lt;br/&gt;&lt;br/&gt;Speaking of CPUs, nearly all CPU hardware (e.g. Intel, AMD and ARM) are proprietary, but people are developing a new open source CPU architecture called RISC-V that seems to be catching on quickly.  &lt;br/&gt;&lt;br/&gt;So, if you are dead set on being 100% open source, you may eventually be able to buy a RISC-V computer that uses Libreboot to load a Linux operating system that doesn’t support any proprietary hardware.&lt;br/&gt;&lt;br/&gt;For most of us, however, using open source software whenever possible (if there is a choice) is probably good enough to feel like we’re participating in the open source community.</description>
      <enclosure url="http://triosdevelopers.com/jason.eckert/Jason_Eckert_Homepage/blog/Entries/2019/8/9_The_different_faces_of_open_source_software_files/droppedImage.jpg" length="68451" type="image/jpeg"/>
    </item>
  </channel>
</rss>
