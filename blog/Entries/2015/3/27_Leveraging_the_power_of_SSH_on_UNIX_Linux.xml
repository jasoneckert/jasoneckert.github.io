<?xml version="1.0"?>
<content collectionGUID="6CD99A98-03EA-45F6-9464-3BE6AB01739F">
  <lastEdited clientType="local-build-20200628" date="2020-06-28 12:32:25 +0000"/>
  <textBox id="generic-title-attributes" dynamic="no" visible="yes">
    <richText>&lt;b&gt;Leveraging the power of SSH on UNIX/Linux&lt;/b&gt;</richText>
  </textBox>
  <textBox id="generic-datefield-attributes" dynamic="no" visible="yes">
    <richText>&lt;b&gt;Friday, March 27, 2015&lt;/b&gt;</richText>
  </textBox>
  <textBox id="generic-body-attributes" dynamic="no" visible="yes">
    <richText>&lt;b&gt;UNIX (and Linux) systems have always been powerful by design - programs and utilities on these systems can be combined in ways that achieve wonderful things using shell piping, redirection, and an imagination.  This is often called UNIX kung foo......or just &lt;/b&gt;&lt;b&gt;UNIX foo&lt;/b&gt;&lt;b&gt; ;-)&#xD;&#xD;The topic of SSH file transfer using the scp command came up today in class, and I thought I&#x2019;d take the opportunity to introduce some of this UNIX foo.  While the scp command is designed specifically for secure file copy, you can also be creative with the ssh command to achieve the same result.  The ssh command creates a secure tunnel to a remote host that can be used to obtain a remote shell.  But it can also be used to tunnel other information too - more specifically, large files and X Windows data.&#xD;&#xD;Let&#x2019;s start with a simple example of using UNIX foo to copy files (regardless of their contents - binary or otherwise) from one machine to another.  Say that you are the root user on your network and you want to copy stuff between Linux machines.  To copy the lala.bin file from your home directory on a remote computer (IP=192.168.1.140) to the current directory on your local system (keeping the same filename), you could use:&#xD;&lt;/b&gt;&lt;b&gt;ssh 192.168.1.140 cat lala.bin &gt; lala.bin &#xD;&lt;/b&gt;&lt;b&gt;(supply the root password when prompted)&#x2028;&#xD;Similarly, you could copy the lala.bin file from your current directory to your home directory on a remote computer (IP=192.168.1.140) using the following command:&#xD;&lt;/b&gt;&lt;b&gt;ssh 192.168.1.140 cat &lt;lala.bin "&gt;" lala.bin&#xD;&lt;/b&gt;&lt;b&gt;(supply the root password when prompted)&#xD;&#xD;But UNIX foo doesn&#x2019;t stop there - you can get even more creative!&#xD;For example, say that you have a Linux system on the network called OOBLA (IP address = 192.168.1.55) that has two hard disks (/dev/sda and /dev/sdb), and that the second hard disk (/dev/sdb) contains key data (user files, databases, etc.) that are important to back up each day.  And say that you wrote a small shell script that runs each day and creates a backup of the  /dev/sdb filesystem each day and copies it to another Linux server called BACKUPSERVER (IP address = 192.168.1.99).  This shell script could look something like this:&#xD;&#xD;&lt;/b&gt;&lt;b&gt;#!/bin/bash&#xD;if dd if=/dev/sdb of=/tmp/oobla-backup.img&#xD;then&#xD;mount -t nfs 192.168.1.99:/backups /remoteNFSshare&#xD;cp -F /tmp/oobla-backup.img /remoteNFSshare&#xD;rm /tmp/oobla-backup.img&#xD;fi&#xD;&lt;/b&gt;&lt;b&gt;&#xD;So what happens if the /dev/sdb filesystem on OOBLA gets corrupted?  &#xD;Well, you could copy the oobla-backup.img from the BACKUPSERVER back to your /tmp directory and then use the dd command to reimage it back to /dev/sdb.&#xD;&#xD;But that wouldn&#x2019;t use UNIX foo. An easier solution would be to log into the BACKUPSERVER and run the following command:&#xD;&#xD;&lt;/b&gt;&lt;b&gt;dd if=/backups/oobla-backup.img | ssh 192.168.1.55 dd of=/dev/sdb&lt;/b&gt;&lt;b&gt;&#x2028;(supply the root password when prompted)&#xD;&#xD;This will open the oobla-backup.img file within the dd command and send it sector-by-sector across an SSH tunnel to the OOBLA host (IP=192.168.1.55), where the remote dd command will complete the writing of the output to /dev/sdb - much faster!!!&#x2028;&#xD;And yes, this would work if /dev/sda (hosting the OS itself) got corrupted on OOBLA - simply boot any small Linux via USB flash drive or CD/DVD into memory on OOBLA, set an IP on the network, and you can push a backup of /dev/sda from BACKUPSERVER to the small Linux system in memory on OOBLA and tell it to write /dev/sda sector-by-sector again!&#xD;&#x2028;Now, try some UNIX foo using other UNIX commands!&#x2028;&lt;/b&gt;</richText>
  </textBox>
  <image id="generic-picture-attributes" dynamic="no" visible="yes" src="27_Leveraging_the_power_of_SSH_on_UNIX_Linux_files/shapeimage_1.png" left="0px" top="0px" width="361px" height="331px"/>
</content>
