<?xml version="1.0"?>
<content collectionGUID="6CD99A98-03EA-45F6-9464-3BE6AB01739F">
  <lastEdited clientType="local-build-20200627" date="2020-06-28 02:22:15 +0000"/>
  <textBox id="generic-title-attributes" dynamic="no" visible="yes">
    <richText>&lt;b&gt;All about Nano Server &amp; Windows Containers&lt;/b&gt;</richText>
  </textBox>
  <textBox id="generic-datefield-attributes" dynamic="no" visible="yes">
    <richText>&lt;b&gt;Monday, May 28, 2018&lt;/b&gt;</richText>
  </textBox>
  <textBox id="generic-body-attributes" dynamic="no" visible="yes">
    <richText>&lt;b&gt;Today, I gave a presentation on two new features of Windows Server 2016 at a WWITPRO meetup:&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	Nano Server, a small footprint installation option of Windows Server 2016 server that primarily supports IIS, DNS &amp; File Services &#xD;	&#x2022;	Windows Containers, which is Windows Server 2016 support for docker containers&#xD;&lt;/b&gt;&lt;b&gt;&#xD;In this blog post, I&#x2019;ll detail many of the commands that I used during this presentation, so that you can play with both Nano Server and Windows Containers at home.&#xD;&#xD;&lt;/b&gt;&lt;b&gt;PART 1: NANO SERVER&#xD;&lt;/b&gt;&lt;b&gt;If you have Hyper-V installed your host computer (Win10 or Windows Server 2016), you can easily host an Internal network by creating an Internal virtual switch in Hyper-V Manager.  I find that this setup is the easiest way to play with new systems - for my commands below, I&#x2019;ll be using a setup that looks like this:&#xD;&#xD;&#xD;&#xD;The host OS is the computer on the left that is connected to the Internet via the External virtual switch, and to a private Internal network via the Internal virtual switch (192.168.1.0/24).   &#xD;&#xD;Although Nano Server can be installed natively on a computer (bare metal), we&#x2019;ll be installing in a virtual machine.  Simply mount your 2016 DVD and copy the \NanoServer directory from the DVD to C:\.&#xD;&#xD;Next, open PowerShell and run the following commands to create a Nano Server virtual machine called firstnano:&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	cd C:\NanoServer\NanoServerImageGenerator &#xD;	&#x2022;	Import-Module .\NanoServerImageGenerator.psm1 &#x2013;verbose&#xD;	&#x2022;	New-NanoServerImage -DeploymentType guest -Edition standard -MediaPath C:\ -BasePath C:\NanoServer\NanoServerImageGenerator\ -TargetPath C:\ NanoServer\NanoServerImageGenerator\firstnano.vhdx -ComputerName firstnano -Package Microsoft-NanoServer-IIS-Package&#xD;&lt;/b&gt;&lt;b&gt;&#xD;You&#x2019;ll be prompted to select an Administrator password and then the firstnano.vhdx image will be created.  The -Package option can be used to specify any package that exists within the Packages folder under the C:\NanoServer folder!&#xD;&#xD;Next, open Hyper-V Manager and create new virtual machine (1GB RAM, connected to the Internal virtual switch, existing firstnano.vhdx).  Next, boot your virtual machine and you will be prompted to authenticate to the Nano Server Recovery Console, where you can navigate the text menus to set IP information, firewall rules and enable WinRM.  At minimum, make sure you set the correct IP information and enable WinRM.&#xD;&#xD;On your host OS, run the following within PowerShell to connect to the Nano Server and open up the ports needed for file sharing (which is much easier with netsh than in the Nano Server Recovery Console):&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	Set&#x2010;Item WSMan:\localhost\Client\TrustedHosts "192.168.1.10"&#xD;	&#x2022;	Enter&#x2010;PSSession &#x2010;ComputerName 192.168.1.10 &#x2010;Credential 192.168.1.10\Administrator&#xD;	&#x2022;	netsh advfirewall firewall set rule group="File and Printer Sharing" new enable=yes&#xD;&lt;/b&gt;&lt;b&gt;&#xD;Now, you can test out fileserver access from your host OS.  Enter &lt;/b&gt;&lt;b&gt;\\192.168.1.10\c$&lt;/b&gt;&lt;b&gt; within Windows Explorer to connect to the c$ share on your Nano Server.  Since you installed IIS when you created your firstnano.vhdx file, you can also test out access to the default IIS home page by entering &lt;/b&gt;&lt;b&gt;http://192.168.1.10 &lt;/b&gt;&lt;b&gt;into your Web browser.&#xD;&#xD;If you want to join your Nano Server to a domain, you must perform an offline domain join using djoin.exe.  My host OS is also a domain controller for the domain called lala.com.  Thus, I can run the following command on my host OS to generate the offline join request:&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	djoin.exe /provision /domain lala.com /machine firstnano /savefile C:\request&#xD;&lt;/b&gt;&lt;b&gt;&#xD;Next, use PowerShell on your host OS to connect to Nano Server, and complete the offline domain join request:&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	Enter&#x2010;PSSession &#x2010;ComputerName 192.168.1.10 &#x2010;Credential 192.168.1.10\Administrator&#xD;	&#x2022;	djoin /requestodj /loadfile C:\request /windowspath C:\windows /localos&#xD;	&#x2022;	Restart-Computer&#xD;&lt;/b&gt;&lt;b&gt;&#xD;Once your computer has rebooted, you can now login locally to the Nano Server Recovery Console as the Administrator within the lala.com domain!&#xD;&#xD;Although we installed IIS during the creation of firstnano.vhdx, you can also add software later on too.  Check out &lt;/b&gt;&lt;b&gt;&lt;a href="https://docs.microsoft.com/en-us/windows-server/get-started/iis-on-nano-server%22%20%5Cl%20%22installing-iis-on-nano-server"&gt;https://docs.microsoft.com/en-us/windows-server/get-started/iis-on-nano-server#installing-iis-on-nano-server&lt;/a&gt;&lt;/b&gt;&lt;b&gt; to see different methods of doing this!&#xD;&#xD;The easiest method to do this is using dism.exe alongside an unattend.xml file that specifies the packages to install from the C:\NanoServer\Packages folder.  Simply copy the C:\NanoServer\Packages folder from your host OS (which we copied earlier from the DVD) to the Nano Server (\\192.168.1.10\c$) so it shows up as C:\Packages on the Nano server.&#xD;&#xD;Next, create a new C:\Unattend.xml file on your host OS with the following contents (to install IIS) and copy it to C:\ on your Nano Server:&#xD;&lt;/b&gt;&lt;b&gt;&lt;unattend xmlns="urn:schemas-microsoft-com:unattend"&gt;  &#xD;    &lt;servicing&gt;  &#xD;        &lt;package action="install"&gt;  &#xD;            &lt;assemblyIdentity name="Microsoft-NanoServer-IIS-Package" version="10.0.14393.0" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" /&gt;  &#xD;            &lt;source location="c:\packages\Microsoft-NanoServer-IIS-Package.cab" /&gt;  &#xD;        &lt;/package&gt;  &#xD;        &lt;package action="install"&gt;  &#xD;            &lt;assemblyIdentity name="Microsoft-NanoServer-IIS-Package" version="10.0.14393.0" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="en-US" /&gt;  &#xD;            &lt;source location="c:\packages\en-us\Microsoft-NanoServer-IIS-Package_en-us.cab" /&gt;  &#xD;        &lt;/package&gt;  &#xD;    &lt;/servicing&gt;  &#xD;    &lt;cpi:offlineImage cpi:source="" xmlns:cpi="urn:schemas-microsoft-com:cpi" /&gt;  &#xD;&lt;/unattend&gt;&#xD;&lt;/b&gt;&lt;b&gt;&#xD;Finally, open PowerShell on your host OS, connect to your Nano Server and install the software.  Since we chose to install IIS, you&#x2019;ll need to start it afterwards as well using Start-Service or net start:&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	dism /online /apply-unattend:\unattend.xml&#xD;	&#x2022;	dism /online /get-packages&#xD;	&#x2022;	net start w3svc&#xD;&lt;/b&gt;&lt;b&gt;&#xD;You can now test out access to the default IIS home page by entering &lt;/b&gt;&lt;b&gt;http://192.168.1.10 &lt;/b&gt;&lt;b&gt;into your Web browser.&#xD;&#xD;As a final note, I should mention that Nano Server is simply a small footprint installation option for Windows Server 2016 - if you noticed earlier when we created firstnano.vhdx, I chose &#x201C;Standard&#x201D; as the edition.  That means I have to have a Standard edition license of Windows Server 2016 to legally run this virtual machine.  In other words, Nano Server is a complete server, and must be licensed like any other server - it&#x2019;s just a small footprint server that may be better suited to running within the cloud, where a minimal attack surface is ideal. &#xD;&#xD;&lt;/b&gt;&lt;b&gt;PART 2: WINDOWS CONTAINERS&#xD;&lt;/b&gt;&lt;b&gt;Containers are not new at all - they&#x2019;ve been around for decades! The core concept is this:&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;You identify a key service &amp; related libraries (e.g. Web Server) that make a unique system&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;Then you virtualize just those things on a common base OS (e.g. several copies of a &#x201C;unique&#x201D; Web Server running on a single OS kernel)&#xA0; &#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;Each copy is called a container, and is NOT a full/standalone OS!  &#xD;&lt;/b&gt;&lt;b&gt;&#xD;This type of virtualization is called OS virtualization since you have a single underlying OS that contains several different personas (=containers) and hence looks like several separate operating systems.  Docker is the most common OS virtualization software used today to create containers on almost any platform, and Windows Containers is just Windows support for Docker.  &#xD;&#xD;If you haven&#x2019;t made the connection yet, Nano was essentially created to support Docker (although Microsoft would probably never admit that).  Since Nano Server is a small footprint version of Windows Server 2016, you can easily run several Nano Server containers on a Windows Server 2016 host to provide a plethora of different Web, DNS and File services as needed.&#xD;&#xD;Moreover, you can use &lt;/b&gt;&lt;b&gt;regular containers&lt;/b&gt;&lt;b&gt; (same OS kernel underneath all containers) or &lt;/b&gt;&lt;b&gt;Hyper-V containers&lt;/b&gt;&lt;b&gt; (different copy of kernel underneath each container).  The Hyper-V binaries provide the functionality to create a separate kernel underneath each container.  If you only plan on using regular containers, there&#x2019;s no need to install Hyper-V whatsoever.&#xD;&#xD;But the best part about Windows Containers is the licensing.  Since a container is NOT a full/standalone OS, you can run them for FREE!&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;You can run an unlimited number of containers on Windows Server 2016 Datacenter edition&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;You can run an unlimited number of regular containers on Windows Server 2016 Standard edition, and up to 2 Hyper-V containers&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;You can run an unlimited number of Hyper-V containers on Win10 (Pro/Enterprise)&#xD;&lt;/b&gt;&lt;b&gt;&#xD;Before installing Windows Containers and Docker, you must first ensure that you have all the updates on your Windows Server!  Next, you can add the NuGet Docker repository and install Docker using the following PowerShell commands:&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	Install&#x2010;Module &#x2010;Name DockerMsftProvider &#x2010;Repository psgallery &#x2013;Force&#xD;	&#x2022;	Install&#x2010;Package &#x2010;Name docker &#x2010;ProviderName DockerMsftProvider&#xD;	&#x2022;	Restart&#x2010;Computer &#x2010;Force&#xD;&lt;/b&gt;&lt;b&gt;&#xD;Next, create a free DockerHub account at &lt;/b&gt;&lt;b&gt;&lt;a href="https://hub.docker.com"&gt;https://hub.docker.com&lt;/a&gt;&lt;/b&gt;&lt;b&gt; &#xD;&#xD;Now, you can now use the &lt;/b&gt;&lt;b&gt;docker command&lt;/b&gt;&lt;b&gt; from this point onwards to administer windows containers:&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker login&lt;/b&gt;&lt;b&gt;     #Log into DockerHub&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker search iis&lt;/b&gt;&lt;b&gt;     #Search for IIS images on DockerHub &#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker pull nanoserver/iis&lt;/b&gt;&lt;b&gt;     #Downloads a preconfigured container&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker pull busybox&lt;/b&gt;&lt;b&gt;     #Why did this fail on a Windows host?&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker images&lt;/b&gt;&lt;b&gt;     #Shows downloaded container images&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker rmi &#x2013;f imagenumber&lt;/b&gt;&lt;b&gt;     #Delete an image (don&#x2019;t do this yet)&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker tag nanoserver/iis nanoweb&lt;/b&gt;&lt;b&gt;     #Creates an alias for an image&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker images&lt;/b&gt;&lt;b&gt;     #Note your alias shows up as a new image&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker ps&lt;/b&gt;&lt;b&gt;     #Are there any images running?&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker run --name nanoweb1 &#x2013;it nanoweb	&#xD;&lt;/b&gt;&lt;b&gt;&#xD;This last command runs a new container called nanoweb1 and opens a shell.  At this shell, run &#x201C;dir c:\&#x201D; and note you are on Nano server.  Next, run &#x201C;ipconfig&#x201D; and note your IPaddress (all containers sit behind a virtual NAT by default on the 172 network).&#xD;&#xD;On your host OS, open your Web browser and enter http://IP_Address_of_container and note that you see the IIS Welcome page.  At the container shell, type exit to stop running your container, refresh the page in your Web browser and note that your container is no longer available!  Next, run the following:&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker ps&lt;/b&gt;&lt;b&gt;     #Are there any images running?&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker ps -a&lt;/b&gt;&lt;b&gt;     #What images have run in the past?&#xD;&lt;/b&gt;&lt;b&gt;&#xD;Take note of the container number (e.g. 75ab4e49c839).  You can now save your previous container settings for future use and start your container again.  Finally you can open a shell again in your container and stop it when finished:&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker commit containernumber&lt;/b&gt;&lt;b&gt; &#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker start containernumber&lt;/b&gt;&lt;b&gt;	&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker exec -it containernumber cmd &lt;/b&gt;&lt;b&gt; &#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	docker stop containernumber&lt;/b&gt;&lt;b&gt;	&#xD;&lt;/b&gt;&lt;b&gt;&#xD;At this point, you should have a basic understanding of containers - create several containers from your nanoweb image and ensure that they are all running concurrently.  Next, play around with changing the network settings that docker uses by default (hint: check out the help page for the docker command).  You can also modify a container and upload it to your own section of DockerHub.   Finally, check out Kubernetes - a framework for managing large numbers of containers with ease!&lt;/b&gt;</richText>
  </textBox>
  <image id="generic-picture-attributes" dynamic="no" visible="yes" src="28_All_about_Nano_Server_%26_Windows_Containers_files/shapeimage_1.png" left="0px" top="0px" width="700px" height="400px"/>
</content>
