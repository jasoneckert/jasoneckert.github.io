<?xml version="1.0"?>
<content collectionGUID="6CD99A98-03EA-45F6-9464-3BE6AB01739F">
  <lastEdited clientType="local-build-20200628" date="2020-06-28 12:32:58 +0000"/>
  <textBox id="generic-title-attributes" dynamic="no" visible="yes">
    <richText>&lt;b&gt;SSH Foo&lt;/b&gt;</richText>
  </textBox>
  <textBox id="generic-datefield-attributes" dynamic="no" visible="yes">
    <richText>&lt;b&gt;Sunday, December 9, 2018&lt;/b&gt;</richText>
  </textBox>
  <textBox id="generic-body-attributes" dynamic="no" visible="yes">
    <richText>&lt;b&gt;Last week, I gave a presentation at a local LUG (which is a Linux User&#x2019;s Group, for anyone who hasn&#x2019;t heard of those before) on the subject of SSH Foo.&#xD;&#xD;In UNIX circles, we refer to tricks of the trade as &#x201C;Kung Fu&#x201D; or just &#x201C;Fu&#x201D; (which sounds rude), so it is spelled &#x201C;Foo&#x201D; ;-)&#xD;&#xD;In this blog post, I&#x2019;ll summarize my SSH Foo talk! &#xD;&#xD;&lt;/b&gt;&lt;b&gt;Part 1 - Cryptography Basics:&#xD;&lt;/b&gt;&lt;b&gt;Symmetric cryptography (e.g. AES/Blowfish/RC4):&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	Fast for encrypting payloads of data&#xD;	&#x2022;	However, negotiating the symmetric key across a network is difficult&#xD;	&#x2022;	Clients usually generate a symmetric key and encrypt it asymmetrically to get it to a server across a network &#xD;&lt;/b&gt;&lt;b&gt;&#xD;&#xD;&#xD;Asymmetric cryptography (e.g. RSA/DSA/ECC):&#xD;&#xD;&#xD; &#xD;&#xD;&lt;/b&gt;&lt;b&gt;Part 2 - SSH Basics:&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	Encrypted telnet (&lt;/b&gt;&lt;b&gt;telnet towel.blinkenlights.nl&lt;/b&gt;&lt;b&gt;) but without Star Wars&#xD;	&#x2022;	Uses symmetric encryption for all payload data&#xD;	&#x2022;	Uses asymmetric encryption to protect symmetric key generated by the SSH client&#xD;&lt;/b&gt;&lt;b&gt;&#xD;&#xD;&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	Symmetric encryption controlled by client&#xD;&lt;/b&gt;&lt;b&gt;         &lt;/b&gt;&lt;b&gt; &lt;/b&gt;&lt;b&gt;  /etc/ssh/ssh_config&#xD;         Ciphers (usually AES*)&lt;/b&gt;&lt;b&gt;&#xD;&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	Asymmetric &lt;/b&gt;&lt;b&gt;encryption&lt;/b&gt;&lt;b&gt; controlled by server (the host keys):&#xD;&lt;/b&gt;&lt;b&gt;         &lt;/b&gt;&lt;b&gt;   /etc/ssh/sshd_config&#xD;         HostKey /etc/ssh/ssh_host_rsa_key &lt;/b&gt;&lt;b&gt;(&amp; .pub)&#xD;&lt;/b&gt;&lt;b&gt;         HostKey /etc/ssh/ssh_host_ecdsa_key&lt;/b&gt;&lt;b&gt; (&amp; .pub)&#xD;&lt;/b&gt;&lt;b&gt;         HostKey /etc/ssh/ssh_host_ed25519_key &lt;/b&gt;&lt;b&gt;(&amp; .pub)&#xD;&lt;/b&gt;&lt;b&gt;       ~/.ssh/known_hosts&lt;/b&gt;&lt;b&gt;&#xD;&lt;/b&gt;&lt;b&gt;&#xD;&#xD;&lt;/b&gt;&lt;b&gt;Part 3 - SSH User Keys:&#xD;&lt;/b&gt;&lt;b&gt;&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	You can also create asymmetric keys for your local user account and add these keys to each server you manage to avoid passwords&#xD;&lt;/b&gt;&lt;b&gt;    &lt;/b&gt;&lt;b&gt;   ssh-keygen &#xD;&lt;/b&gt;&lt;b&gt;               &#xD;                ***Do you want to protect your private key with passphrase? &#xD;                You&#x2019;ll need it each time the private key is used unless you want to &#xD;                load a program that caches it, such as ssh-agent&#xD;          &lt;/b&gt;&lt;b&gt;  &#xD;       cat ~/.ssh/id_rsa&#xD;       cat ~/.ssh/id_rsa.pub&#xD;&#xD;       ssh-copy-id -i root@server1&#xD;       ssh root@server1&lt;/b&gt;&lt;b&gt; (look ma, no password!)&#xD;&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;Many systems prevent root SSH in sshd_config (must connect as bob and su/sudo):&#xD;&lt;/b&gt;&lt;b&gt;       PermitRootLogins yes/no/without-password&#xD;&lt;/b&gt;&lt;b&gt;&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;If you want to omit the username for each host, you can use host-specific options on your SSH client to specify a default user:&#xD;&lt;/b&gt;&lt;b&gt;       cat ~/.ssh/config&#xD;         Host server1&#xD;         User admin&#xD;         Host server2&#xD;         User bob &lt;/b&gt;&lt;b&gt;&#xD;&lt;/b&gt;&lt;b&gt;&#xD;&#xD;&lt;/b&gt;&lt;b&gt;Part 4 - SSH User Keys:&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	Copy remote /root/lala file (on server1) to local /var directory&#xD;&lt;/b&gt;&lt;b&gt;    &lt;/b&gt;&lt;b&gt;   ssh root@server1 cat /root/lala &gt; /var/sample&#xD;       scp root@server1:/root/lala /var&#xD;&lt;/b&gt;&lt;b&gt;&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;Copy the local /root/lala file to /var directory on remote computer (appserver)&#xD;&lt;/b&gt;&lt;b&gt;       ssh root@server1 cat &lt;/root/lala "&gt;" /var/lala&#xD;       scp /root/lala root@server1:/var&#xD;&lt;/b&gt;&lt;b&gt;&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;Can also use piping&#xD;&lt;/b&gt;&lt;b&gt;       dd if=/root/lala | ssh -C user@host dd of=/var/lala&#xD;&lt;/b&gt;&lt;b&gt;&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;Works for anything, really&#xD;&lt;/b&gt;&lt;b&gt;       dd if=/dev/tty5 | ssh -C user@host dd of=/dev/tty2 &#xD;&lt;/b&gt;&lt;b&gt;&#xD;&#xD;&lt;/b&gt;&lt;b&gt;Part 5 - Tunneling:&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	Tunneling X.org (requires xauth)&#xD;&lt;/b&gt;&lt;b&gt;       &lt;/b&gt;&lt;b&gt; &lt;/b&gt;&lt;b&gt;       &lt;/b&gt;&lt;b&gt;ssh &#x2013;X root@server1 &#xD;       gnome-control-center&amp;&lt;/b&gt;&lt;b&gt;&#xD;&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;Tunneling other stuff (e.g. VNC) &#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;Method 1: &lt;/b&gt;&lt;b&gt;Local tunneling &#x2013; e.g. forward local traffic on port 5999 to server1 on port 5900 as bob: &#xD;&lt;/b&gt;&lt;b&gt;       ssh -L 5999:localhost:5900 bob@server1&#xD;&lt;/b&gt;&lt;b&gt;           &#xD;                ***After this, you can start a VNC viewer and connect to localhost:5999 &#xD;                to access the VNC server running on port 5900 on server1 through an &#xD;                SSH tunnel)&#xD;&lt;/b&gt;&lt;b&gt;&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;Method 2:&lt;/b&gt;&lt;b&gt; Remote tunneling &#x2013; e.g. bob on client1 can start a VNC viewer and connect to server1:5999 in order to access the VNC server running on port 5900 on server1 (your server) via SSH: &#xD;&lt;/b&gt;&lt;b&gt; &lt;/b&gt;&lt;b&gt;       ssh -R 5999:server1:5900 bob@client1&#xD;&lt;/b&gt;&lt;b&gt;&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;Evading firewall restrictions with local tunneling:&#xD;&lt;/b&gt;&lt;b&gt;                 &lt;/b&gt;&lt;b&gt;ssh homeserver &#x2013;L 443:lala.com:443&#xD;&#xA0; &#xD;        cat /etc/hosts (127.0.0.1 lala.com)&#xD;        apachectl stop&#xD;        curl https://lala.com&lt;/b&gt;&lt;b&gt;&#xD;&#xD;            General format (you are computerA): &lt;/b&gt;&lt;b&gt;ssh computerB &#x2013;L 443:computerC:44&lt;/b&gt;&lt;b&gt;3&#xD;&lt;/b&gt;&lt;b&gt;&#xD;&#xD;&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	Can also tell SSH to do SOCKS5 proxy forwarding to a home server to evade a firewall:&#xD;&lt;/b&gt;&lt;b&gt;     &lt;/b&gt;&lt;b&gt;ssh -D 8080 homeserver&#xD;&lt;/b&gt;&lt;b&gt;           &#xD;            ***Set Chrome/Firefox proxy address to localhost:8080&#xD;            ***DNS requests are not part of this (you can tunnel DNS through a SOCKS5 proxy&#xD;            with other software like DNSCrypt or a Firefox plugin)&#xD;&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	&lt;/b&gt;&lt;b&gt;Problems?&#xD;&lt;/b&gt;&lt;b&gt;  &lt;/b&gt;&lt;b&gt;     grep Forwarding /etc/ssh/sshd_config&#xD;        X11Forwarding no&#xD;        AllowTcpForwarding no&lt;/b&gt;&#xD;&#xD;&lt;b&gt;&#xD;&lt;/b&gt;&lt;b&gt;Part 6 - SSHFS (NFS is sooooo yesterday):&#xD;&lt;/b&gt;&lt;b&gt;	&#x2022;	Access remote / filesystem on server1 over SSH session mounted to local /mnt directory: &#xD;&lt;/b&gt;&lt;b&gt;         &lt;/b&gt;&lt;b&gt; &lt;/b&gt; &lt;b&gt; dnf install sshfs&#xD;&#xA0; &#xD;      sshfs root@server1:/ /mnt&#xD;      ls /mnt&#xD;      rm &#x2013;Rf /mnt/*&lt;/b&gt;&lt;b&gt; &lt;/b&gt;&lt;b&gt;(--no-preserve-root bypassed)&lt;/b&gt;</richText>
  </textBox>
  <image id="generic-picture-attributes" dynamic="no" visible="yes" src="9_SSH_Foo_files/shapeimage_1.png" left="0px" top="0px" width="305px" height="305px"/>
</content>
